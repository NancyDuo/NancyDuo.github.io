<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>React Hooks</title>
    <link href="/2021/10/12/React%20Hooks/"/>
    <url>/2021/10/12/React%20Hooks/</url>
    
    <content type="html"><![CDATA[<h2 id="React-Hook-Hooks"><a href="#React-Hook-Hooks" class="headerlink" title="React Hook/Hooks"></a>React Hook/Hooks</h2><p>(1). Hook是React 16.8.0版本增加的新特性/新语法<br>(2). 可以让你在函数组件中使用 state 以及其他的 React 特性</p><h2 id="三个常用的Hook"><a href="#三个常用的Hook" class="headerlink" title="三个常用的Hook"></a>三个常用的Hook</h2><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">(1). State Hook: React.useState()(2). Effect Hook: React.useEffect()(3). Ref Hook: React.useRef()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div><h3 id="State-Hook"><a href="#State-Hook" class="headerlink" title="State Hook"></a>State Hook</h3><p>(1). State Hook让函数组件也可以有state状态, 并进行状态数据的读写操作<br>(2). 语法: const [xxx, setXxx] = React.useState</p><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; classthis.setState(state &#x3D;&gt; (&#123;count:state.count+1&#125;))&lt;h2&gt;当前求和为&#123;this.state.count&#125;&lt;&#x2F;h2&gt;&#x2F;&#x2F; functionconst [count,setCount] &#x3D; React.useState(0)  function add()&#123;&#x2F;&#x2F;setCount(count+1) &#x2F;&#x2F;第一种写法setCount(count &#x3D;&gt; count+1 )&#125;  &lt;h2&gt;当前求和为：&#123;count&#125;&lt;&#x2F;h2&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>(3). useState()说明:<br>    参数: 第一次初始化指定的值在内部作缓存<br>    返回值: 包含2个元素的数组, 第1个为内部当前状态值, 第2个为更新状态值的函数<br>(4). setXxx()2种写法:<br>    setXxx(newValue): 参数为非函数值, 直接指定新的状态值, 内部用其覆盖原来的状态值<br>    setXxx(value =&gt; newValue): 参数为函数, 接收原本的状态值, 返回新的状态值, 内部用其覆盖原来的状态值</p><h3 id="Effect-Hook"><a href="#Effect-Hook" class="headerlink" title="Effect Hook"></a>Effect Hook</h3><p>(1)Effect Hook 用于模拟类组件中的生命周期钩子</p><p>(2)React中的操作:</p><ul><li>发ajax请求数据获取</li><li>设置订阅 / 启动定时器</li><li>手动更改真实DOM</li></ul><p>(3)可以把 useEffect Hook 看做如下三个函数的组合</p><ul><li>componentDidMount()</li><li>componentDidUpdate()</li><li>componentWillUnmount() <div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; classunmount &#x3D; ()&#x3D;&gt;&#123;ReactDOM.unmountComponentAtNode(document.getElementById(&#39;root&#39;))&#125;&#x2F;&#x2F; functionReact.useEffect(()&#x3D;&gt;&#123;let timer &#x3D; setInterval(()&#x3D;&gt;&#123;setCount(count &#x3D;&gt; count+1 )&#125;,1000)return ()&#x3D;&gt;&#123;clearInterval(timer)&#125;&#125;,[])<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h3 id="Ref-Hook"><a href="#Ref-Hook" class="headerlink" title="Ref Hook"></a>Ref Hook</h3>(1). Ref Hook可以在函数组件中存储/查找组件内的标签或任意其它数据<br>(2). 语法: const refContainer = useRef()<div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;classmyRef &#x3D; React.createRef()show &#x3D; ()&#x3D;&gt;&#123;alert(this.myRef.current.value)&#125;&lt;input type&#x3D;&quot;text&quot; ref&#x3D;&#123;this.myRef&#125;&#x2F;&gt;&#x2F;&#x2F; functionconst myRef &#x3D; React.useRef()function show()&#123;alert(myRef.current.value)&#125;&lt;input type&#x3D;&quot;text&quot; ref&#x3D;&#123;myRef&#125;&#x2F;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div>(3). 作用:保存标签对象,功能与React.createRef()一样</li></ul><p>完整例子</p><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">import React from &#39;react&#39;import ReactDOM from &#39;react-dom&#39;&#x2F;&#x2F;类式组件&#x2F;* class Demo extends React.Component &#123;state &#x3D; &#123;count:0&#125;myRef &#x3D; React.createRef()add &#x3D; ()&#x3D;&gt;&#123;this.setState(state &#x3D;&gt; (&#123;count:state.count+1&#125;))&#125;unmount &#x3D; ()&#x3D;&gt;&#123;ReactDOM.unmountComponentAtNode(document.getElementById(&#39;root&#39;))&#125;show &#x3D; ()&#x3D;&gt;&#123;alert(this.myRef.current.value)&#125;componentDidMount()&#123;this.timer &#x3D; setInterval(()&#x3D;&gt;&#123;this.setState( state &#x3D;&gt; (&#123;count:state.count+1&#125;))&#125;,1000)&#125;componentWillUnmount()&#123;clearInterval(this.timer)&#125;render() &#123;return (&lt;div&gt;&lt;input type&#x3D;&quot;text&quot; ref&#x3D;&#123;this.myRef&#125;&#x2F;&gt;&lt;h2&gt;当前求和为&#123;this.state.count&#125;&lt;&#x2F;h2&gt;&lt;button onClick&#x3D;&#123;this.add&#125;&gt;点我+1&lt;&#x2F;button&gt;&lt;button onClick&#x3D;&#123;this.unmount&#125;&gt;卸载组件&lt;&#x2F;button&gt;&lt;button onClick&#x3D;&#123;this.show&#125;&gt;点击提示数据&lt;&#x2F;button&gt;&lt;&#x2F;div&gt;)&#125;&#125; *&#x2F;function Demo()&#123;&#x2F;&#x2F;console.log(&#39;Demo&#39;);const [count,setCount] &#x3D; React.useState(0)const myRef &#x3D; React.useRef()React.useEffect(()&#x3D;&gt;&#123;let timer &#x3D; setInterval(()&#x3D;&gt;&#123;setCount(count &#x3D;&gt; count+1 )&#125;,1000)return ()&#x3D;&gt;&#123;clearInterval(timer)&#125;&#125;,[])&#x2F;&#x2F;加的回调function add()&#123;&#x2F;&#x2F;setCount(count+1) &#x2F;&#x2F;第一种写法setCount(count &#x3D;&gt; count+1 )&#125;&#x2F;&#x2F;提示输入的回调function show()&#123;alert(myRef.current.value)&#125;&#x2F;&#x2F;卸载组件的回调function unmount()&#123;ReactDOM.unmountComponentAtNode(document.getElementById(&#39;root&#39;))&#125;return (&lt;div&gt;&lt;input type&#x3D;&quot;text&quot; ref&#x3D;&#123;myRef&#125;&#x2F;&gt;&lt;h2&gt;当前求和为：&#123;count&#125;&lt;&#x2F;h2&gt;&lt;button onClick&#x3D;&#123;add&#125;&gt;点我+1&lt;&#x2F;button&gt;&lt;button onClick&#x3D;&#123;unmount&#125;&gt;卸载组件&lt;&#x2F;button&gt;&lt;button onClick&#x3D;&#123;show&#125;&gt;点我提示数据&lt;&#x2F;button&gt;&lt;&#x2F;div&gt;)&#125;export default Demo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div>]]></content>
    
    
    
    <tags>
      
      <tag>React</tag>
      
      <tag>Hooks</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>React 组件通信--- Transfer Data in React</title>
    <link href="/2021/10/12/React%20%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1---Transfer%20Data%20in%20React/"/>
    <url>/2021/10/12/React%20%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1---Transfer%20Data%20in%20React/</url>
    
    <content type="html"><![CDATA[<h3 id="正常props父子传递-children-props"><a href="#正常props父子传递-children-props" class="headerlink" title="正常props父子传递 children props"></a>正常props父子传递 children props</h3><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">class A extends Component &#123;state &#x3D; &#123;name:&#39;tom&#39;&#125;render() &#123;const &#123;name&#125; &#x3D; this.statereturn (&lt;div className&#x3D;&quot;a&quot;&gt;&lt;h3&gt;我是A组件&lt;&#x2F;h3&gt;        &lt;B name&#x3D;&#123;name&#125;&#x2F;&gt;&lt;&#x2F;div&gt;)&#125;&#125;class B extends Component &#123;render() &#123;return (&lt;div className&#x3D;&quot;b&quot;&gt;&lt;h3&gt;我是B组件,&#123;this.props.name&#125;&lt;&#x2F;h3&gt;&lt;&#x2F;div&gt;)&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h3 id="render-props"><a href="#render-props" class="headerlink" title="render props"></a>render props</h3><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">import React, &#123; Component &#125; from &#39;react&#39;export default class Parent extends Component &#123;render() &#123;return (&lt;div className&#x3D;&quot;parent&quot;&gt;&lt;h3&gt;我是Parent组件&lt;&#x2F;h3&gt;&lt;A render&#x3D;&#123;(name)&#x3D;&gt;&lt;B name&#x3D;&#123;name&#125;&#x2F;&gt;&#125;&#x2F;&gt;&lt;&#x2F;div&gt;)&#125;&#125;class A extends Component &#123;state &#x3D; &#123;name:&#39;tom&#39;&#125;render() &#123;const &#123;name&#125; &#x3D; this.statereturn (&lt;div className&#x3D;&quot;a&quot;&gt;&lt;h3&gt;我是A组件&lt;&#x2F;h3&gt;&#123;this.props.render(name)&#125;&lt;&#x2F;div&gt;)&#125;&#125;class B extends Component &#123;render() &#123;return (&lt;div className&#x3D;&quot;b&quot;&gt;&lt;h3&gt;我是B组件,&#123;this.props.name&#125;&lt;&#x2F;h3&gt;&lt;&#x2F;div&gt;)&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h3 id="消息订阅-发布-pubs-sub"><a href="#消息订阅-发布-pubs-sub" class="headerlink" title="消息订阅-发布 pubs-sub"></a>消息订阅-发布 pubs-sub</h3><p>send data</p><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">import React, &#123; Component &#125; from &#39;react&#39;import PubSub from &#39;pubsub-js&#39;export default class Search extends Component &#123;search &#x3D; ()&#x3D;&gt;&#123;&#x2F;&#x2F;获取用户的输入(连续解构赋值+重命名)const &#123;keyWordElement:&#123;value:keyWord&#125;&#125; &#x3D; this&#x2F;&#x2F;发送请求前通知List更新状态PubSub.publish(&#39;pubKey&#39;,&#123;isFirst:false,isLoading:true&#125;)&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>get data</p><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">import React, &#123; Component &#125; from &#39;react&#39;import PubSub from &#39;pubsub-js&#39;export default class List extends Component &#123;componentDidMount()&#123;this.token &#x3D; PubSub.subscribe(&#39;pubKey&#39;,(_,stateObj)&#x3D;&gt;&#123;this.setState(stateObj)&#125;)&#125;componentWillUnmount()&#123;PubSub.unsubscribe(this.token)&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h3 id="集中式管理-redux"><a href="#集中式管理-redux" class="headerlink" title="集中式管理 redux"></a>集中式管理 redux</h3><p>Refer to previous blog</p><h3 id="生产者-消费者模式-context"><a href="#生产者-消费者模式-context" class="headerlink" title="生产者-消费者模式 context"></a>生产者-消费者模式 context</h3><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">import React, &#123; Component &#125; from &#39;react&#39;&#x2F;&#x2F;创建Context对象const MyContext &#x3D; React.createContext()const &#123;Provider,Consumer&#125; &#x3D; MyContextexport default class A extends Component &#123;state &#x3D; &#123;username:&#39;tom&#39;,age:18&#125;render() &#123;const &#123;username,age&#125; &#x3D; this.statereturn (&lt;div className&#x3D;&quot;parent&quot;&gt;&lt;h3&gt;我是A组件&lt;&#x2F;h3&gt;&lt;h4&gt;我的用户名是:&#123;username&#125;&lt;&#x2F;h4&gt;&lt;Provider value&#x3D;&#123;&#123;username,age&#125;&#125;&gt;&lt;B&#x2F;&gt;&lt;&#x2F;Provider&gt;&lt;&#x2F;div&gt;)&#125;&#125;class B extends Component &#123;render() &#123;return (&lt;div className&#x3D;&quot;child&quot;&gt;&lt;h3&gt;我是B组件&lt;&#x2F;h3&gt;&lt;C&#x2F;&gt;&lt;&#x2F;div&gt;)&#125;&#125;&#x2F;* class C extends Component &#123;&#x2F;&#x2F;声明接收contextstatic contextType &#x3D; MyContextrender() &#123;const &#123;username,age&#125; &#x3D; this.contextreturn (&lt;div className&#x3D;&quot;grand&quot;&gt;&lt;h3&gt;我是C组件&lt;&#x2F;h3&gt;&lt;h4&gt;我从A组件接收到的用户名:&#123;username&#125;,年龄是&#123;age&#125;&lt;&#x2F;h4&gt;&lt;&#x2F;div&gt;)&#125;&#125; *&#x2F;function C()&#123;return (&lt;div className&#x3D;&quot;grand&quot;&gt;&lt;h3&gt;我是C组件&lt;&#x2F;h3&gt;&lt;h4&gt;我从A组件接收到的用户名:&lt;Consumer&gt;&#123;value &#x3D;&gt; &#96;$&#123;value.username&#125;,年龄是$&#123;value.age&#125;&#96;&#125;&lt;&#x2F;Consumer&gt;&lt;&#x2F;h4&gt;&lt;&#x2F;div&gt;)&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h2 id="组件间的关系"><a href="#组件间的关系" class="headerlink" title="组件间的关系"></a>组件间的关系</h2><p>父子组件：props<br>兄弟组件(非嵌套组件)：消息订阅-发布、集中式管理<br>祖孙组件(跨级组件)：消息订阅-发布、集中式管理、context</p>]]></content>
    
    
    
    <tags>
      
      <tag>React</tag>
      
      <tag>组件通信</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>React-Redux</title>
    <link href="/2021/10/11/React-Redux/"/>
    <url>/2021/10/11/React-Redux/</url>
    
    <content type="html"><![CDATA[<p>React-Redux is different from Redux which is build from React, while Redux is a plugin and you can use it in Vue also.</p><h3 id="在index-js-中设置provider-传递store给App下所有子组件"><a href="#在index-js-中设置provider-传递store给App下所有子组件" class="headerlink" title="在index js 中设置provider 传递store给App下所有子组件"></a>在index js 中设置provider 传递store给App下所有子组件</h3><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">import React from &#39;react&#39;;import ReactDOM from &#39;react-dom&#39;;import App from &#39;.&#x2F;App&#39;;import store from &#39;.&#x2F;components&#x2F;redux&#x2F;store.jsx&#39;import &#123;Provider&#125; from &#39;react-redux&#39;ReactDOM.render(&lt;Provider store&#x3D;&#123;store&#125;&gt;&lt;App&#x2F;&gt;&lt;&#x2F;Provider&gt;,document.getElementById(&#39;root&#39;))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h3 id="在components下建containers和redux文件如下，也可把reducer再汇总成一个，只暴露index-reducer"><a href="#在components下建containers和redux文件如下，也可把reducer再汇总成一个，只暴露index-reducer" class="headerlink" title="在components下建containers和redux文件如下，也可把reducer再汇总成一个，只暴露index-reducer"></a>在components下建containers和redux文件如下，也可把reducer再汇总成一个，只暴露index-reducer</h3><p><img src="/img/redux.png" alt="redux"></p><h3 id="在store中引入reducer，使用中间件"><a href="#在store中引入reducer，使用中间件" class="headerlink" title="在store中引入reducer，使用中间件"></a>在store中引入reducer，使用中间件</h3><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;引入createStore，专门用于创建redux中最为核心的store对象import &#123;createStore,applyMiddleware,combineReducers&#125; from &#39;redux&#39;&#x2F;&#x2F;引入reducerimport addReducer from &#39;.&#x2F;reducers&#x2F;add-reducer&#39;import personReducer from &#39;.&#x2F;reducers&#x2F;person-reducer&#39;&#x2F;&#x2F;引入redux-thunk，用于支持异步actionimport thunk from &#39;redux-thunk&#39;const allReducers &#x3D; combineReducers(&#123;adds:addReducer,persons:personReducer&#125;)&#x2F;&#x2F;暴露storeexport default createStore(allReducers,applyMiddleware(thunk))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h3 id="在action中-pass-type-and-data-to-reducer"><a href="#在action中-pass-type-and-data-to-reducer" class="headerlink" title="在action中 pass type and data to reducer"></a>在action中 pass type and data to reducer</h3><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">export const createAddPersonAction &#x3D;(personObj)&#x3D;&gt;(&#123;type:&#39;addPerson&#39;,data:personObj&#125;)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">export function createIncrementAction(data)&#123;    return &#123;type:&#39;increment&#39;,data&#125;&#125;export const createDecrementAction &#x3D; data &#x3D;&gt;(&#123;type:&#39;decrement&#39;,data&#125;)export const createIncrementAsyncAction &#x3D; (data,syncTime)&#x3D;&gt; &#123;    return (dispatch)&#x3D;&gt;&#123;setTimeout(()&#x3D;&gt;&#123;dispatch(createIncrementAction(data))&#125;,syncTime)&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h3 id="在reducer接收previous-value-和action，action中有type和打他，再加工数据"><a href="#在reducer接收previous-value-和action，action中有type和打他，再加工数据" class="headerlink" title="在reducer接收previous value 和action，action中有type和打他，再加工数据"></a>在reducer接收previous value 和action，action中有type和打他，再加工数据</h3><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">const init &#x3D; [&#123;id:&#39;001&#39;,name:&#39;zhang&#39;,age:10&#125;]export default function personReducer(pre,action)&#123;    const &#123;type,data&#125; &#x3D; action    switch (type) &#123;        case &#39;addPerson&#39; :            return [data,...pre]            &#x2F;&#x2F;return pre.unshift(data) not working         default:            return init    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h3 id="在-container里通过connect中state接到数据，再通过props传递给UI"><a href="#在-container里通过connect中state接到数据，再通过props传递给UI" class="headerlink" title="在 container里通过connect中state接到数据，再通过props传递给UI"></a>在 container里通过connect中state接到数据，再通过props传递给UI</h3><p>In Person.jsx container</p><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">import React, &#123; Component &#125; from &#39;react&#39;import &#123;connect&#125; from &#39;react-redux&#39;import &#123;createAddPersonAction&#125; from &#39;..&#x2F;redux&#x2F;actions&#x2F;person-action&#39;class Person extends Component &#123;    addPerson&#x3D;()&#x3D;&gt;&#123;        const name &#x3D; this.nameNode.value        const age &#x3D; this.ageNode.value        const personObj &#x3D; &#123;id:Date.now(),name,age&#125;        this.props.addPersons(personObj)    &#125;    render() &#123;        return (            &lt;div&gt;                &lt;h1&gt;Up: &#123;this.props.sum&#125;&lt;&#x2F;h1&gt;                &lt;input ref&#x3D;&#123;c&#x3D;&gt;&#123;this.nameNode &#x3D; c&#125;&#125; type&#x3D;&quot;text&quot; placeholder&#x3D;&#39;name&#39; &#x2F;&gt;                &lt;input ref&#x3D;&#123;c&#x3D;&gt;&#123;this.ageNode&#x3D;c&#125;&#125; type&#x3D;&quot;text&quot; placeholder&#x3D;&#39;age&#39; &#x2F;&gt;                &lt;button onClick&#x3D;&#123;this.addPerson&#125;&gt;add&lt;&#x2F;button&gt;                &lt;ul&gt;                   &#123;this.props.people.map(p&#x3D;&gt;&#123;                       return &lt;li key&#x3D;&#123;p.id&#125;&gt;                           &#123;p.name&#125; --- &#123;p.age&#125;                       &lt;&#x2F;li&gt;                   &#125;)&#125;                &lt;&#x2F;ul&gt;            &lt;&#x2F;div&gt;        )    &#125;&#125;export default connect(    state &#x3D;&gt;(&#123;people:state.persons,sum:state.adds&#125;),&#123;        addPersons:createAddPersonAction    &#125;)(Person)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>In Add.jsx container</p><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">import React, &#123; Component &#125; from &#39;react&#39;import &#123;connect&#125; from &#39;react-redux&#39;import &#123; createIncrementAction,createDecrementAction,createIncrementAsyncAction&#125; from &#39;..&#x2F;redux&#x2F;actions&#x2F;add-action&#39;class Add extends Component &#123;    increment&#x3D;()&#x3D;&gt;&#123;        const&#123;value&#125; &#x3D; this.selectNum        this.props.add(value*1)    &#125;    decrement&#x3D;()&#x3D;&gt;&#123;              const&#123;value&#125; &#x3D; this.selectNum        this.props.minus(value*1)     &#125;     incrementAsync&#x3D;()&#x3D;&gt;&#123;        const &#123;value&#125; &#x3D; this.selectNum        this.props.addAsync(value*1,500)     &#125;        render() &#123;        return (            &lt;div&gt;                &lt;h1&gt;Total is &#123;this.props.total&#125;&lt;&#x2F;h1&gt;                &lt;h1&gt;Up is &#123;this.props.people.length&#125;&lt;&#x2F;h1&gt;                &lt;select ref&#x3D;&#123;c&#x3D;&gt;&#123;this.selectNum&#x3D;c&#125;&#125;&gt;                    &lt;option value&#x3D;&#39;1&#39;&gt;1&lt;&#x2F;option&gt;                    &lt;option value&#x3D;&quot;2&quot;&gt;2&lt;&#x2F;option&gt;                    &lt;option value&#x3D;&quot;3&quot;&gt;3&lt;&#x2F;option&gt;                &lt;&#x2F;select&gt;                &lt;button onClick&#x3D;&#123;this.increment&#125;&gt;add&lt;&#x2F;button&gt;                &lt;button onClick&#x3D;&#123;this.decrement&#125;&gt;minuse&lt;&#x2F;button&gt;                &lt;button onClick&#x3D;&#123;this.incrementAsync&#125;&gt;asyncronus add&lt;&#x2F;button&gt;            &lt;&#x2F;div&gt;        )    &#125;&#125;export default connect(        state &#x3D;&gt; (&#123;total:state.adds,people:state.persons&#125;),        &#123;            add:createIncrementAction,            minus:createDecrementAction,            addAsync:createIncrementAsyncAction        &#125;    )(Add)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div>]]></content>
    
    
    
    <tags>
      
      <tag>React</tag>
      
      <tag>React-Redux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redux</title>
    <link href="/2021/10/11/Redux/"/>
    <url>/2021/10/11/Redux/</url>
    
    <content type="html"><![CDATA[<h2 id="Redux精简版-Redux-Without-Action"><a href="#Redux精简版-Redux-Without-Action" class="headerlink" title="Redux精简版 Redux Without Action"></a>Redux精简版 Redux Without Action</h2><p>建立:</p><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">- redux- store.js  - xxx_reducer.js<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div><p>在store.js：<br>1)引入redux中的createStore函数，创建一个store<br>2)createStore调用时要传入一个为其服务的reducer<br>3)暴露store对象</p><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">import &#123;createStore&#125; from &#39;redux&#39;import reducer from &#39;.&#x2F;reducer&#39;export default createStore(reducer)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div><p>xxx_reducer.js：<br>1)reducer的本质是一个函数，接收：preState,action，返回加工后的状态<br>2)reducer有两个作用：初始化状态，加工状态<br>3)reducer被第一次调用时，是store自动触发的，传递的preState是undefined,传递的action是:{type:‘@@REDUX/INIT_a.2.b.4}</p><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">export default function reducer(pre,action)&#123;    const &#123;type,data&#125; &#x3D; action    switch (type) &#123;        case &#39;increment&#39;:            return pre + data                   case &#39;decrement&#39;:            return pre - data          default:            return 0           &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>在index.js中监测store中状态的改变，一旦发生改变重新渲染 ‘<App/>‘<br>备注：redux只负责管理状态,状态的改变驱动着页面的展示要自己写。</p><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">import React, &#123; Component &#125; from &#39;react&#39;import store from &#39;.&#x2F;store&#39;export default class add extends Component &#123;componentDidMount()&#123;    store.subscribe(()&#x3D;&gt;&#123;        this.setState(&#123;&#125;)    &#125;)&#125;    increment&#x3D;()&#x3D;&gt;&#123;       const&#123;value&#125; &#x3D; this.selectNum        store.dispatch(&#123;            type:&#39;increment&#39;,            data: value*1        &#125;)    &#125;    decrement&#x3D;()&#x3D;&gt;&#123;        const&#123;value&#125; &#x3D; this.selectNum        store.dispatch(&#123;            type:&#39;decrement&#39;,            data: value*1        &#125;)     &#125;      render() &#123;        return (            &lt;div&gt;                &lt;h1&gt;Total is &#123;store.getState()&#125;&lt;&#x2F;h1&gt;                &lt;select ref&#x3D;&#123;c&#x3D;&gt;&#123;this.selectNum&#x3D;c&#125;&#125;&gt;                    &lt;option value&#x3D;&#39;1&#39;&gt;1&lt;&#x2F;option&gt;                    &lt;option value&#x3D;&quot;2&quot;&gt;2&lt;&#x2F;option&gt;                    &lt;option value&#x3D;&quot;3&quot;&gt;3&lt;&#x2F;option&gt;                &lt;&#x2F;select&gt;                &lt;button onClick&#x3D;&#123;this.increment&#125;&gt;add&lt;&#x2F;button&gt;                &lt;button onClick&#x3D;&#123;this.decrement&#125;&gt;minuse&lt;&#x2F;button&gt;            &lt;&#x2F;div&gt;        )    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h2 id="Redux异步Action版-Async-function-in-Redux"><a href="#Redux异步Action版-Async-function-in-Redux" class="headerlink" title="Redux异步Action版 Async function in Redux"></a>Redux异步Action版 Async function in Redux</h2><p>何时需要异步action：想要对状态进行操作，但是具体的数据靠异步任务返回。<br>具体编码：<br>1)yarn add redux-thunk，并配置在store中</p><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">store.js&#x2F;&#x2F;引入createStore，专门用于创建redux中最为核心的store对象import &#123;createStore,applyMiddleware&#125; from &#39;redux&#39;&#x2F;&#x2F;引入为Count组件服务的reducerimport countReducer from &#39;.&#x2F;count_reducer&#39;&#x2F;&#x2F;引入redux-thunk，用于支持异步actionimport thunk from &#39;redux-thunk&#39;&#x2F;&#x2F;暴露storeexport default createStore(countReducer,applyMiddleware(thunk))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>2)创建action的函数不再返回一般对象，而是一个函数，该函数中写异步任务.</p><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">&#96;&#96;&#96;&#x2F;&#x2F; index.jsimport React from &#39;react&#39;;import ReactDOM from &#39;react-dom&#39;;&#x2F;&#x2F; import &#123; BrowserRouter &#125; from &#39;react-router-dom&#39;;import &#39;.&#x2F;index.css&#39;;import App from &#39;.&#x2F;App&#39;;&#x2F;&#x2F; import reportWebVitals from &#39;.&#x2F;reportWebVitals&#39;;import store from &#39;.&#x2F;components&#x2F;increment&#x2F;store&#39;store.subscribe(()&#x3D;&gt;&#123;ReactDOM.render(&lt;App&#x2F;&gt;,document.getElementById(&#39;root&#39;))&#125;)ReactDOM.render(  &lt;App &#x2F;&gt;,  document.getElementById(&#39;root&#39;));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>3)调用action </p><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">increment&#x3D;()&#x3D;&gt;&#123;   const&#123;value&#125; &#x3D; this.selectNum    &#x2F;&#x2F; without action:    &#x2F;&#x2F;store.dispatch(&#123;    &#x2F;&#x2F;     type:&#39;increment&#39;,    &#x2F;&#x2F;     data: value*1    &#x2F;&#x2F; &#125;)    store.dispatch(createIncrementAction(value*1))&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>4)异步任务有结果后，分发一个同步的action去真正操作数据。</p><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">action.jsexport function createIncrementAction(data)&#123;    return &#123;type:&#39;increment&#39;,data&#125;&#125;export const createDecrementAction &#x3D; data &#x3D;&gt;(&#123;type:&#39;decrement&#39;,data&#125;)export const createIncrementAsyncAction &#x3D; (data,syncTime)&#x3D;&gt; &#123;    return (dispatch)&#x3D;&gt;&#123;setTimeout(()&#x3D;&gt;&#123;dispatch(createIncrementAction(data))&#125;,syncTime)&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div>]]></content>
    
    
    
    <tags>
      
      <tag>React</tag>
      
      <tag>Redux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>封装Axios --- Axios Module</title>
    <link href="/2021/10/10/%E5%B0%81%E8%A3%85axios/"/>
    <url>/2021/10/10/%E5%B0%81%E8%A3%85axios/</url>
    
    <content type="html"><![CDATA[<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>设置接口请求前缀：根据开发、测试、生产环境的不同，前缀需要加以区分<br>请求头 : 来实现一些具体的业务，必须携带一些参数才可以请求(例如：会员业务)<br>状态码: 根据接口返回的不同status ， 来执行不同的业务，这块需要和后端约定好<br>请求方法：根据get、post等方法进行一个再次封装，使用起来更为方便<br>请求拦截器: 根据请求的请求头设定，来决定哪些请求可以访问<br>响应拦截器： 这块就是根据 后端`返回来的状态码判定执行不同业务</p><h2 id="基本使用-Send-simple-Request"><a href="#基本使用-Send-simple-Request" class="headerlink" title="基本使用 Send simple Request"></a>基本使用 Send simple Request</h2><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">import axios from &#39;axios&#39;axios(&#123;          url:&#39;xxx&#39;,    &#x2F;&#x2F; 设置请求的地址  method:&quot;GET&quot;, &#x2F;&#x2F; 设置请求方法  params:&#123;      &#x2F;&#x2F; get请求使用params进行参数凭借,如果是post请求用data    type: &#39;&#39;,    page: 1  &#125;&#125;).then(res &#x3D;&gt; &#123;    &#x2F;&#x2F; res为后端返回的数据  console.log(res);   &#125;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h2 id="并发请求-Concurrent-Requests"><a href="#并发请求-Concurrent-Requests" class="headerlink" title="并发请求 Concurrent Requests"></a>并发请求 Concurrent Requests</h2><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">function getUserAccount() &#123;    return axios.get(&#39;&#x2F;user&#x2F;12345&#39;);&#125;function getUserPermissions() &#123;    return axios.get(&#39;&#x2F;user&#x2F;12345&#x2F;permissions&#39;);&#125;axios.all([getUserAccount(), getUserPermissions()])    .then(axios.spread(function (res1, res2) &#123;     &#x2F;&#x2F; res1第一个请求的返回的内容，res2第二个请求返回的内容    &#x2F;&#x2F; 两个请求都执行完成才会执行&#125;));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h2 id="设置接口请求前缀-Dev-or-Production"><a href="#设置接口请求前缀-Dev-or-Production" class="headerlink" title="设置接口请求前缀 Dev or Production"></a>设置接口请求前缀 Dev or Production</h2><p>利用node环境变量来作判断，用来区分开发、测试、生产环境</p><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">if (process.env.NODE_ENV &#x3D;&#x3D;&#x3D; &#39;development&#39;) &#123;  axios.defaults.baseURL &#x3D; &#39;http:&#x2F;&#x2F;dev.xxx.com&#39;&#125; else if (process.env.NODE_ENV &#x3D;&#x3D;&#x3D; &#39;production&#39;) &#123;  axios.defaults.baseURL &#x3D; &#39;http:&#x2F;&#x2F;prod.xxx.com&#39;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>在本地调试的时候，还需要在vue.config.js文件中配置devServer实现代理转发，从而实现跨域</p><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">devServer: &#123;    proxy: &#123;      &#39;&#x2F;proxyApi&#39;: &#123;        target: &#39;http:&#x2F;&#x2F;dev.xxx.com&#39;,        changeOrigin: true,        pathRewrite: &#123;          &#39;&#x2F;proxyApi&#39;: &#39;&#39;        &#125;      &#125;    &#125;  &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h2 id="设置请求头与超时时间-Request-Header-Timeout"><a href="#设置请求头与超时时间-Request-Header-Timeout" class="headerlink" title="设置请求头与超时时间 Request Header / Timeout"></a>设置请求头与超时时间 Request Header / Timeout</h2><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">const service &#x3D; axios.create(&#123;    ...    timeout: 30000,  &#x2F;&#x2F; 请求 30s 超时  headers: &#123;        get: &#123;          &#39;Content-Type&#39;: &#39;application&#x2F;x-www-form-urlencoded;charset&#x3D;utf-8&#39;          &#x2F;&#x2F; 在开发中，一般还需要单点登录或者其他功能的通用请求头，可以一并配置进来        &#125;,        post: &#123;          &#39;Content-Type&#39;: &#39;application&#x2F;json;charset&#x3D;utf-8&#39;          &#x2F;&#x2F; 在开发中，一般还需要单点登录或者其他功能的通用请求头，可以一并配置进来        &#125;  &#125;,&#125;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; get 请求export function httpGet(&#123;  url,  params &#x3D; &#123;&#125;&#125;) &#123;  return new Promise((resolve, reject) &#x3D;&gt; &#123;    axios.get(url, &#123;      params    &#125;).then((res) &#x3D;&gt; &#123;      resolve(res.data)    &#125;).catch(err &#x3D;&gt; &#123;      reject(err)    &#125;)  &#125;)&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; post请求export function httpPost(&#123;  url,  data &#x3D; &#123;&#125;,  params &#x3D; &#123;&#125;&#125;) &#123;  return new Promise((resolve, reject) &#x3D;&gt; &#123;    axios(&#123;      url,      method: &#39;post&#39;,      transformRequest: [function (data) &#123;        let ret &#x3D; &#39;&#39;        for (let it in data) &#123;          ret +&#x3D; encodeURIComponent(it) + &#39;&#x3D;&#39; + encodeURIComponent(data[it]) + &#39;&amp;&#39;        &#125;        return ret      &#125;],      &#x2F;&#x2F; 发送的数据      data,      &#x2F;&#x2F; url参数      params    &#125;).then(res &#x3D;&gt; &#123;      resolve(res.data)    &#125;)  &#125;)&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h2 id="先引入封装好的方法，在要调用的接口重新封装成一个方法暴露出去-Export"><a href="#先引入封装好的方法，在要调用的接口重新封装成一个方法暴露出去-Export" class="headerlink" title="先引入封装好的方法，在要调用的接口重新封装成一个方法暴露出去 Export"></a>先引入封装好的方法，在要调用的接口重新封装成一个方法暴露出去 Export</h2><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">import &#123; httpGet, httpPost &#125; from &#39;.&#x2F;http&#39;export const getorglist &#x3D; (params &#x3D; &#123;&#125;) &#x3D;&gt; httpGet(&#123; url: &#39;apps&#x2F;api&#x2F;org&#x2F;list&#39;, params &#125;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div><h2 id="调用-Use"><a href="#调用-Use" class="headerlink" title="调用 Use"></a>调用 Use</h2><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; .vueimport &#123; getorglist &#125; from &#39;@&#x2F;assets&#x2F;js&#x2F;api&#39;getorglist(&#123; id: 200 &#125;).then(res &#x3D;&gt; &#123;  console.log(res)&#125;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h2 id="请求拦截器-Request-Interceptor"><a href="#请求拦截器-Request-Interceptor" class="headerlink" title="请求拦截器 Request Interceptor"></a>请求拦截器 Request Interceptor</h2><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; 请求拦截器axios.interceptors.request.use(  config &#x3D;&gt; &#123;    &#x2F;&#x2F; 每次发送请求之前判断是否存在token    &#x2F;&#x2F; 如果存在，则统一在http请求的header都加上token，这样后台根据token判断你的登录情况，此处token一般是用户完成登录后储存到localstorage里的    token &amp;&amp; (config.headers.Authorization &#x3D; token)    return config  &#125;,  error &#x3D;&gt; &#123;    return Promise.error(error)  &#125;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h2 id="响应拦截器-Reponse-Interceptor"><a href="#响应拦截器-Reponse-Interceptor" class="headerlink" title="响应拦截器 Reponse Interceptor"></a>响应拦截器 Reponse Interceptor</h2>  <div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">  &#x2F;&#x2F; 响应拦截器axios.interceptors.response.use(response &#x3D;&gt; &#123;  &#x2F;&#x2F; 如果返回的状态码为200，说明接口请求成功，可以正常拿到数据  &#x2F;&#x2F; 否则的话抛出错误  if (response.status &#x3D;&#x3D;&#x3D; 200) &#123;    if (response.data.code &#x3D;&#x3D;&#x3D; 511) &#123;      &#x2F;&#x2F; 未授权调取授权接口    &#125; else if (response.data.code &#x3D;&#x3D;&#x3D; 510) &#123;      &#x2F;&#x2F; 未登录跳转登录页    &#125; else &#123;      return Promise.resolve(response)    &#125;  &#125; else &#123;    return Promise.reject(response)  &#125;&#125;, error &#x3D;&gt; &#123;  &#x2F;&#x2F; 我们可以在这里对异常状态作统一处理  if (error.response.status) &#123;    &#x2F;&#x2F; 处理请求失败的情况    &#x2F;&#x2F; 对不同返回码对相应处理    return Promise.reject(error.response)  &#125;&#125;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h2 id="例子：Use-Async-for-Readable"><a href="#例子：Use-Async-for-Readable" class="headerlink" title="例子：Use Async for Readable"></a>例子：Use Async for Readable</h2><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">getParams() &#123;     return &#123;       role: this.role,       name: this.name,       status: this.status,       start: (this.PAGINATION.currentPage - 1) * this.PAGINATION.pageSize,       range: this.PAGINATION.pageSize,     &#125;   &#125;,   async getAdminList() &#123;     this.loading &#x3D; true     let res &#x3D; await getAdminList(this.queryParams)     this.tableData &#x3D; res.data.list     this.PAGINATION.total &#x3D; res.data.count     this.loading &#x3D; false   &#125;, async deleteAdmin() &#123;     try &#123;       let res &#x3D; await deleteAdmin(this.id)       this.$message(&#123;         type: &#39;success&#39;,         message: &#39;删除成功&#39;       &#125;)       this.getAdminList()     &#125; catch (err) &#123;       this.$message(&#123;         type: &#39;error&#39;,         message: err.msg       &#125;)     &#125;   &#125;,addParams() &#123;     let &#123; role, username, name, password, gender, profession, education, signature &#125; &#x3D; this.form     return &#123; role, username, name, password, gender, profession, education, signature &#125;   &#125;,async register() &#123;     try &#123;       let res &#x3D; await register(&#123; ...this.addParams() &#125;)       this.$message(&#123;         type: &#39;success&#39;,         message: &#39;添加成功&#39;       &#125;)       this.dialogFormVisible &#x3D; false       this.$emit(&#39;listen&#39;)     &#125; catch (err) &#123;       this.$message(&#123;         type: &#39;error&#39;,         message: err.msg       &#125;)     &#125;   &#125;,<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div>]]></content>
    
    
    
    <tags>
      
      <tag>Vue</tag>
      
      <tag>Axios</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>React知识点</title>
    <link href="/2021/10/01/React%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    <url>/2021/10/01/React%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
    
    <content type="html"><![CDATA[<h2 id="1-setState"><a href="#1-setState" class="headerlink" title="1. setState"></a>1. setState</h2><h3 id="setState更新状态的2种写法"><a href="#setState更新状态的2种写法" class="headerlink" title="setState更新状态的2种写法"></a>setState更新状态的2种写法</h3><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">(1). setState(stateChange, [callback])------对象式的setState            1.stateChange为状态改变对象(该对象可以体现出状态的更改)            2.callback是可选的回调函数, 它在状态更新完毕、界面也更新后(render调用后)才被调用(2). setState(updater, [callback])------函数式的setState            1.updater为返回stateChange对象的函数。            2.updater可以接收到state和props。            4.callback是可选的回调函数, 它在状态更新、界面也更新后(render调用后)才被调用。总结:1.对象式的setState是函数式的setState的简写方式(语法糖)2.使用原则：(1).如果新状态不依赖于原状态 &#x3D;&#x3D;&#x3D;&gt; 使用对象方式(2).如果新状态依赖于原状态 &#x3D;&#x3D;&#x3D;&gt; 使用函数方式(3).如果需要在setState()执行后获取最新的状态数据, 要在第二个callback函数中读取<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><hr><h2 id="2-lazyLoad"><a href="#2-lazyLoad" class="headerlink" title="2. lazyLoad"></a>2. lazyLoad</h2><h3 id="路由组件的lazyLoad"><a href="#路由组件的lazyLoad" class="headerlink" title="路由组件的lazyLoad"></a>路由组件的lazyLoad</h3><div class="code-wrapper"><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//1.通过React的lazy函数配合import()函数动态加载路由组件 ===> 路由组件代码会被分开打包</span><span class="token keyword">const</span> Login <span class="token operator">=</span> <span class="token function">lazy</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'@/pages/Login'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//2.通过&lt;Suspense>指定在加载得到路由打包文件前显示一个自定义loading界面</span><span class="token operator">&lt;</span>Suspense fallback<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token operator">&lt;</span>h1<span class="token operator">></span>loading<span class="token operator">...</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span><span class="token punctuation">&#125;</span><span class="token operator">></span>       <span class="token operator">&lt;</span>Switch<span class="token operator">></span>           <span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">"/xxx"</span> component<span class="token operator">=</span><span class="token punctuation">&#123;</span>Xxxx<span class="token punctuation">&#125;</span><span class="token operator">/</span><span class="token operator">></span>           <span class="token operator">&lt;</span>Redirect to<span class="token operator">=</span><span class="token string">"/login"</span><span class="token operator">/</span><span class="token operator">></span>       <span class="token operator">&lt;</span><span class="token operator">/</span>Switch<span class="token operator">></span>   <span class="token operator">&lt;</span><span class="token operator">/</span>Suspense<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><hr><h2 id="3-Hooks"><a href="#3-Hooks" class="headerlink" title="3. Hooks"></a>3. Hooks</h2><h4 id="1-React-Hook-Hooks是什么"><a href="#1-React-Hook-Hooks是什么" class="headerlink" title="1. React Hook/Hooks是什么?"></a>1. React Hook/Hooks是什么?</h4><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">(1). Hook是React 16.8.0版本增加的新特性&#x2F;新语法(2). 可以让你在函数组件中使用 state 以及其他的 React 特性<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div><h4 id="2-三个常用的Hook"><a href="#2-三个常用的Hook" class="headerlink" title="2. 三个常用的Hook"></a>2. 三个常用的Hook</h4><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">(1). State Hook: React.useState()(2). Effect Hook: React.useEffect()(3). Ref Hook: React.useRef()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div><h4 id="3-State-Hook"><a href="#3-State-Hook" class="headerlink" title="3. State Hook"></a>3. State Hook</h4><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">(1). State Hook让函数组件也可以有state状态, 并进行状态数据的读写操作(2). 语法: const [xxx, setXxx] &#x3D; React.useState(initValue)  (3). useState()说明:        参数: 第一次初始化指定的值在内部作缓存        返回值: 包含2个元素的数组, 第1个为内部当前状态值, 第2个为更新状态值的函数(4). setXxx()2种写法:        setXxx(newValue): 参数为非函数值, 直接指定新的状态值, 内部用其覆盖原来的状态值        setXxx(value &#x3D;&gt; newValue): 参数为函数, 接收原本的状态值, 返回新的状态值, 内部用其覆盖原来的状态值<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h4 id="4-Effect-Hook"><a href="#4-Effect-Hook" class="headerlink" title="4. Effect Hook"></a>4. Effect Hook</h4><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">(1). Effect Hook 可以让你在函数组件中执行副作用操作(用于模拟类组件中的生命周期钩子)(2). React中的副作用操作:        发ajax请求数据获取        设置订阅 &#x2F; 启动定时器        手动更改真实DOM(3). 语法和说明:         useEffect(() &#x3D;&gt; &#123;           &#x2F;&#x2F; 在此可以执行任何带副作用操作          return () &#x3D;&gt; &#123; &#x2F;&#x2F; 在组件卸载前执行            &#x2F;&#x2F; 在此做一些收尾工作, 比如清除定时器&#x2F;取消订阅等          &#125;        &#125;, [stateValue]) &#x2F;&#x2F; 如果指定的是[], 回调函数只会在第一次render()后执行    (4). 可以把 useEffect Hook 看做如下三个函数的组合        componentDidMount()        componentDidUpdate()    componentWillUnmount() <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h4 id="5-Ref-Hook"><a href="#5-Ref-Hook" class="headerlink" title="5. Ref Hook"></a>5. Ref Hook</h4><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">(1). Ref Hook可以在函数组件中存储&#x2F;查找组件内的标签或任意其它数据(2). 语法: const refContainer &#x3D; useRef()(3). 作用:保存标签对象,功能与React.createRef()一样<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div><hr><h2 id="4-Fragment"><a href="#4-Fragment" class="headerlink" title="4. Fragment"></a>4. Fragment</h2><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">&lt;Fragment&gt;&lt;Fragment&gt;&lt;&gt;&lt;&#x2F;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><blockquote><p>可以不用必须有一个真实的DOM根标签了</p></blockquote><hr/><h2 id="5-Context"><a href="#5-Context" class="headerlink" title="5. Context"></a>5. Context</h2><h3 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h3><blockquote><p>一种组件间通信方式, 常用于【祖组件】与【后代组件】间通信</p></blockquote><h3 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h3><div class="code-wrapper"><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token number">1</span><span class="token punctuation">)</span> 创建Context容器对象：<span class="token keyword">const</span> XxxContext <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token number">2</span><span class="token punctuation">)</span> 渲染子组时，外面包裹xxxContext<span class="token punctuation">.</span>Provider<span class="token punctuation">,</span> 通过value属性给后代组件传递数据：<span class="token operator">&lt;</span>xxxContext<span class="token punctuation">.</span>Provider value<span class="token operator">=</span><span class="token punctuation">&#123;</span>数据<span class="token punctuation">&#125;</span><span class="token operator">></span>子组件    <span class="token operator">&lt;</span><span class="token operator">/</span>xxxContext<span class="token punctuation">.</span>Provider<span class="token operator">></span>    <span class="token number">3</span><span class="token punctuation">)</span> 后代组件读取数据：<span class="token comment">//第一种方式:仅适用于类组件 </span>  <span class="token keyword">static</span> contextType <span class="token operator">=</span> xxxContext  <span class="token comment">// 声明接收context</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>context <span class="token comment">// 读取context中的value数据</span>  <span class="token comment">//第二种方式: 函数组件与类组件都可以</span>  <span class="token operator">&lt;</span>xxxContext<span class="token punctuation">.</span>Consumer<span class="token operator">></span>    <span class="token punctuation">&#123;</span>      <span class="token parameter">value</span> <span class="token operator">=></span> <span class="token punctuation">(</span> <span class="token comment">// value就是context中的value数据</span>        要显示的内容      <span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>xxxContext<span class="token punctuation">.</span>Consumer<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><div class="code-wrapper"><pre><code>在应用开发中一般不用context, 一般都用它的封装react插件</code></pre></div><hr/><h2 id="6-组件优化"><a href="#6-组件优化" class="headerlink" title="6. 组件优化"></a>6. 组件优化</h2><h3 id="Component的2个问题"><a href="#Component的2个问题" class="headerlink" title="Component的2个问题"></a>Component的2个问题</h3><blockquote><ol><li><p>只要执行setState(),即使不改变状态数据, 组件也会重新render() ==&gt; 效率低</p></li><li><p>只当前组件重新render(), 就会自动重新render子组件，纵使子组件没有用到父组件的任何数据 ==&gt; 效率低</p></li></ol></blockquote><h3 id="效率高的做法"><a href="#效率高的做法" class="headerlink" title="效率高的做法"></a>效率高的做法</h3><blockquote><p> 只有当组件的state或props数据发生改变时才重新render()</p></blockquote><h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><blockquote><p> Component中的shouldComponentUpdate()总是返回true</p></blockquote><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><div class="code-wrapper"><pre><code>办法1:     重写shouldComponentUpdate()方法    比较新旧state或props数据, 如果有变化才返回true, 如果没有返回false办法2:      使用PureComponent    PureComponent重写了shouldComponentUpdate(), 只有state或props数据有变化才返回true    注意:         只是进行state和props数据的浅比较, 如果只是数据对象内部数据变了, 返回false          不要直接修改state数据, 而是要产生新数据项目中一般使用PureComponent来优化</code></pre></div><hr/><h2 id="7-render-props"><a href="#7-render-props" class="headerlink" title="7. render props"></a>7. render props</h2><h3 id="如何向组件内部动态传入带内容的结构-标签"><a href="#如何向组件内部动态传入带内容的结构-标签" class="headerlink" title="如何向组件内部动态传入带内容的结构(标签)?"></a>如何向组件内部动态传入带内容的结构(标签)?</h3><div class="code-wrapper"><pre><code>Vue中:     使用slot技术, 也就是通过组件标签体传入结构  &lt;A&gt;&lt;B/&gt;&lt;/A&gt;React中:    使用children props: 通过组件标签体传入结构    使用render props: 通过组件标签属性传入结构,而且可以携带数据，一般用render函数属性</code></pre></div><h3 id="children-props"><a href="#children-props" class="headerlink" title="children props"></a>children props</h3><div class="code-wrapper"><pre><code>&lt;A&gt;  &lt;B&gt;xxxx&lt;/B&gt;&lt;/A&gt;&#123;this.props.children&#125;问题: 如果B组件需要A组件内的数据, ==&gt; 做不到 </code></pre></div><h3 id="render-props"><a href="#render-props" class="headerlink" title="render props"></a>render props</h3><div class="code-wrapper"><pre><code>&lt;A render=&#123;(data) =&gt; &lt;C data=&#123;data&#125;&gt;&lt;/C&gt;&#125;&gt;&lt;/A&gt;A组件: &#123;this.props.render(内部state数据)&#125;C组件: 读取A组件传入的数据显示 &#123;this.props.data&#125; </code></pre></div><hr/><h2 id="8-错误边界"><a href="#8-错误边界" class="headerlink" title="8. 错误边界"></a>8. 错误边界</h2><h4 id="理解："><a href="#理解：" class="headerlink" title="理解："></a>理解：</h4><p>错误边界(Error boundary)：用来捕获后代组件错误，渲染出备用页面</p><h4 id="特点："><a href="#特点：" class="headerlink" title="特点："></a>特点：</h4><p>只能捕获后代组件生命周期产生的错误，不能捕获自己组件产生的错误和其他组件在合成事件、定时器中产生的错误</p><h5 id="使用方式："><a href="#使用方式：" class="headerlink" title="使用方式："></a>使用方式：</h5><p>getDerivedStateFromError配合componentDidCatch</p><div class="code-wrapper"><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 生命周期函数，一旦后台组件报错，就会触发</span><span class="token keyword">static</span> <span class="token function">getDerivedStateFromError</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 在render之前触发</span>    <span class="token comment">// 返回新的state</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>        hasError<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">componentDidCatch</span><span class="token punctuation">(</span><span class="token parameter">error<span class="token punctuation">,</span> info</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 统计页面的错误。发送请求发送到后台去</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">,</span> info<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h2 id="9-组件通信方式总结"><a href="#9-组件通信方式总结" class="headerlink" title="9. 组件通信方式总结"></a>9. 组件通信方式总结</h2><h4 id="组件间的关系："><a href="#组件间的关系：" class="headerlink" title="组件间的关系："></a>组件间的关系：</h4><ul><li>父子组件</li><li>兄弟组件（非嵌套组件）</li><li>祖孙组件（跨级组件）</li></ul><h4 id="几种通信方式："><a href="#几种通信方式：" class="headerlink" title="几种通信方式："></a>几种通信方式：</h4><div class="code-wrapper"><pre><code>    1.props：        (1).children props        (2).render props    2.消息订阅-发布：        pubs-sub、event等等    3.集中式管理：        redux、dva等等    4.conText:        生产者-消费者模式</code></pre></div><h4 id="比较好的搭配方式："><a href="#比较好的搭配方式：" class="headerlink" title="比较好的搭配方式："></a>比较好的搭配方式：</h4><div class="code-wrapper"><pre><code>    父子组件：props    兄弟组件：消息订阅-发布、集中式管理    祖孙组件(跨级组件)：消息订阅-发布、集中式管理、conText(开发用的少，封装插件用的多)</code></pre></div>]]></content>
    
    
    
    <tags>
      
      <tag>React</tag>
      
      <tag>基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>React脚手架配置代理总结 Proxy Setting in React For CORS</title>
    <link href="/2021/10/01/react%E8%84%9A%E6%89%8B%E6%9E%B6%E9%85%8D%E7%BD%AE%E4%BB%A3%E7%90%86/"/>
    <url>/2021/10/01/react%E8%84%9A%E6%89%8B%E6%9E%B6%E9%85%8D%E7%BD%AE%E4%BB%A3%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><p>在package.json中追加如下配置</p><div class="code-wrapper"><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token property">"proxy"</span><span class="token operator">:</span><span class="token string">"http://localhost:5000"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p>说明：</p><ol><li>优点：配置简单，前端请求资源时可以不加任何前缀。</li><li>缺点：不能配置多个代理。</li><li>工作方式：上述方式配置代理，当请求了3000不存在的资源时，那么该请求会转发给5000 （优先匹配前端资源）</li></ol><h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><ol><li><p>第一步：创建代理配置文件</p><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">在src下创建配置文件：src&#x2F;setupProxy.js<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></li><li><p>编写setupProxy.js配置具体代理规则：</p><div class="code-wrapper"><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> proxy <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http-proxy-middleware'</span><span class="token punctuation">)</span>module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">app</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>    <span class="token function">proxy</span><span class="token punctuation">(</span><span class="token string">'/api1'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//api1是需要转发的请求(所有带有/api1前缀的请求都会转发给5000)</span>      target<span class="token operator">:</span> <span class="token string">'http://localhost:5000'</span><span class="token punctuation">,</span> <span class="token comment">//配置转发目标地址(能返回数据的服务器地址)</span>      changeOrigin<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">//控制服务器接收到的请求头中host字段的值</span>      <span class="token comment">/*      changeOrigin设置为true时，服务器收到的请求头中的host为：localhost:5000      changeOrigin设置为false时，服务器收到的请求头中的host为：localhost:3000      changeOrigin默认值为false，但我们一般将changeOrigin值设为true      */</span>      pathRewrite<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token string">'^/api1'</span><span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">&#125;</span> <span class="token comment">//去除请求前缀，保证交给后台服务器的是正常请求地址(必须配置)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">proxy</span><span class="token punctuation">(</span><span class="token string">'/api2'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>       target<span class="token operator">:</span> <span class="token string">'http://localhost:5001'</span><span class="token punctuation">,</span>      changeOrigin<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      pathRewrite<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token string">'^/api2'</span><span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></li></ol><p>说明：</p><ol><li>优点：可以配置多个代理，可以灵活的控制请求是否走代理。</li><li>缺点：配置繁琐，前端请求资源时必须加前缀。</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>React</tag>
      
      <tag>Proxy</tag>
      
      <tag>CORS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>组件通信 Transfer Data in Vue</title>
    <link href="/2021/09/27/transfer-data-vue/"/>
    <url>/2021/09/27/transfer-data-vue/</url>
    
    <content type="html"><![CDATA[<h2 id="1-props-emit"><a href="#1-props-emit" class="headerlink" title="1. props / $emit"></a>1. props / $emit</h2><p>The following is showing the parent component passing data to child.</p><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; parent&lt;template&gt;  &lt;div class&#x3D;&quot;section&quot;&gt;    &lt;com-article :articles&#x3D;&quot;articleList&quot;&gt;&lt;&#x2F;com-article&gt;  &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;script&gt;import comArticle from &#39;.&#x2F;test&#x2F;article.vue&#39;export default &#123;  name: &#39;HelloWorld&#39;,  components: &#123; comArticle &#125;,  data() &#123;    return &#123;      articleList: [&#39;Hong&#39;, &#39;Xi&#39;, &#39;San&#39;]    &#125;  &#125;&#125;&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; child&lt;template&gt;  &lt;div&gt;    &lt;span v-for&#x3D;&quot;(item, index) in articles&quot; :key&#x3D;&quot;index&quot;&gt;&#123;&#123;item&#125;&#125;&lt;&#x2F;span&gt;  &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;script&gt;export default &#123;  props: [&#39;articles&#39;]&#125;&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>Child component passes data to parent by $emit</p><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;parent&lt;template&gt;  &lt;div class&#x3D;&quot;section&quot;&gt;    &lt;com-article :articles&#x3D;&quot;articleList&quot; @onEmitIndex&#x3D;&quot;onEmitIndex&quot;&gt;&lt;&#x2F;com-article&gt;    &lt;p&gt;&#123;&#123;currentIndex&#125;&#125;&lt;&#x2F;p&gt;  &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;script&gt;import comArticle from &#39;.&#x2F;test&#x2F;article.vue&#39;export default &#123;  name: &#39;HelloWorld&#39;,  components: &#123; comArticle &#125;,  data() &#123;    return &#123;      currentIndex: -1,      articleList: [&#39;Hong&#39;, &#39;Xi&#39;, &#39;Three&#39;]    &#125;  &#125;,  methods: &#123;    onEmitIndex(idx) &#123;      this.currentIndex &#x3D; idx    &#125;  &#125;&#125;&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;child&lt;template&gt;  &lt;div&gt;    &lt;div v-for&#x3D;&quot;(item, index) in articles&quot; :key&#x3D;&quot;index&quot; @click&#x3D;&quot;emitIndex(index)&quot;&gt;&#123;&#123;item&#125;&#125;&lt;&#x2F;div&gt;  &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;script&gt;export default &#123;  props: [&#39;articles&#39;],  methods: &#123;    emitIndex(index) &#123;      this.$emit(&#39;onEmitIndex&#39;, index)    &#125;  &#125;&#125;&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h2 id="2-children-parent"><a href="#2-children-parent" class="headerlink" title="2. $children / $parent"></a>2. $children / $parent</h2><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; parent&lt;template&gt;  &lt;div class&#x3D;&quot;hello_world&quot;&gt;    &lt;div&gt;&#123;&#123;msg&#125;&#125;&lt;&#x2F;div&gt;    &lt;com-a&gt;&lt;&#x2F;com-a&gt;    &lt;button @click&#x3D;&quot;changeA&quot;&gt;change value&lt;&#x2F;button&gt;  &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;script&gt;import ComA from &#39;.&#x2F;test&#x2F;comA.vue&#39;export default &#123;  name: &#39;HelloWorld&#39;,  components: &#123; ComA &#125;,  data() &#123;    return &#123;      msg: &#39;Welcome&#39;    &#125;  &#125;,  methods: &#123;    changeA() &#123;      &#x2F;&#x2F; get data from child      this.$children[0].messageA &#x3D; &#39;this is new value&#39;    &#125;  &#125;&#125;&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;child&lt;template&gt;  &lt;div class&#x3D;&quot;com_a&quot;&gt;    &lt;span&gt;&#123;&#123;messageA&#125;&#125;&lt;&#x2F;span&gt;    &lt;p&gt;get parent value:  &#123;&#123;parentVal&#125;&#125;&lt;&#x2F;p&gt;  &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;script&gt;export default &#123;  data() &#123;    return &#123;      messageA: &#39;this is old&#39;    &#125;  &#125;,  computed:&#123;    parentVal()&#123;      &#x2F;&#x2F; parent data      return this.$parent.msg;    &#125;  &#125;&#125;&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h2 id="3-provide-inject"><a href="#3-provide-inject" class="headerlink" title="3. provide/inject"></a>3. provide/inject</h2><p>The following is showing: A has B, B has C</p><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; A.vue&lt;template&gt;  &lt;div&gt;&lt;comB&gt;&lt;&#x2F;comB&gt;  &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;script&gt;  import comB from &#39;..&#x2F;components&#x2F;test&#x2F;comB.vue&#39;  export default &#123;    name: &quot;A&quot;,    provide: &#123;      for: &quot;demo&quot;    &#125;,    components:&#123;      comB    &#125;  &#125;&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; B.vue&lt;template&gt;  &lt;div&gt;    &#123;&#123;demo&#125;&#125;    &lt;comC&gt;&lt;&#x2F;comC&gt;  &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;script&gt;  import comC from &#39;..&#x2F;components&#x2F;test&#x2F;comC.vue&#39;  export default &#123;    name: &quot;B&quot;,    inject: [&#39;for&#39;],    data() &#123;      return &#123;        demo: this.for      &#125;    &#125;,    components: &#123;      comC    &#125;  &#125;&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; C.vue&lt;template&gt;  &lt;div&gt;    &#123;&#123;demo&#125;&#125;  &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;script&gt;  export default &#123;    name: &quot;C&quot;,    inject: [&#39;for&#39;],    data() &#123;      return &#123;        demo: this.for      &#125;    &#125;  &#125;&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h2 id="4-ref-refs"><a href="#4-ref-refs" class="headerlink" title="4. ref / refs"></a>4. ref / refs</h2><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;child: A.vueexport default &#123;  data () &#123;    return &#123;      name: &#39;Vue.js&#39;    &#125;  &#125;,  methods: &#123;    sayHello () &#123;      console.log(&#39;hello&#39;)    &#125;  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;parent: app.vue&lt;template&gt;  &lt;component-a ref&#x3D;&quot;comA&quot;&gt;&lt;&#x2F;component-a&gt;&lt;&#x2F;template&gt;&lt;script&gt;  export default &#123;    mounted () &#123;      const comA &#x3D; this.$refs.comA;      console.log(comA.name);  &#x2F;&#x2F; Vue.js      comA.sayHello();  &#x2F;&#x2F; hello    &#125;  &#125;&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h2 id="5-eventBus"><a href="#5-eventBus" class="headerlink" title="5. eventBus"></a>5. eventBus</h2><p>create event-bus.js</p><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; event-bus.jsimport Vue from &#39;vue&#39;export const EventBus &#x3D; new Vue()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div><p>we got 2 components</p><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">&lt;template&gt;  &lt;div&gt;    &lt;show-num-com&gt;&lt;&#x2F;show-num-com&gt;    &lt;addition-num-com&gt;&lt;&#x2F;addition-num-com&gt;  &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;script&gt;import showNumCom from &#39;.&#x2F;showNum.vue&#39;import additionNumCom from &#39;.&#x2F;additionNum.vue&#39;export default &#123;  components: &#123; showNumCom, additionNumCom &#125;&#125;&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>Additon.vue passes data to Show.vue</p><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; addition.vue&lt;template&gt;  &lt;div&gt;    &lt;button @click&#x3D;&quot;additionHandle&quot;&gt;+adder&lt;&#x2F;button&gt;      &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;script&gt;import &#123;EventBus&#125; from &#39;.&#x2F;event-bus.js&#39;export default &#123;  data()&#123;    return&#123;      num:1    &#125;  &#125;,  methods:&#123;    additionHandle()&#123;      EventBus.$emit(&#39;addition&#39;, &#123;        num:this.num++      &#125;)    &#125;  &#125;&#125;&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; showNum.vue &lt;template&gt;  &lt;div&gt;total: &#123;&#123;count&#125;&#125;&lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;script&gt;import &#123; EventBus &#125; from &#39;.&#x2F;event-bus.js&#39;export default &#123;  data() &#123;    return &#123;      count: 0    &#125;  &#125;,  mounted() &#123;    EventBus.$on(&#39;addition&#39;, param &#x3D;&gt; &#123;      this.count &#x3D; this.count + param.num;    &#125;)  &#125;&#125;&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h2 id="6-Vuex"><a href="#6-Vuex" class="headerlink" title="6. Vuex"></a>6. Vuex</h2><ul><li>state: store data</li><li>getter: similiar with vue computed, using for filter or computed</li><li>mutations: doing calculation, not for asynchronous</li><li>actions: data filter, good for asynchronous<div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; parent&lt;template&gt;  &lt;div id&#x3D;&quot;app&quot;&gt;    &lt;ChildA&#x2F;&gt;    &lt;ChildB&#x2F;&gt;  &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;script&gt;  import ChildA from &#39;.&#x2F;components&#x2F;ChildA&#39;   import ChildB from &#39;.&#x2F;components&#x2F;ChildB&#39;  export default &#123;    name: &#39;App&#39;,    components: &#123;ChildA, ChildB&#125;   &#125;&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;childA&lt;template&gt;  &lt;div id&#x3D;&quot;childA&quot;&gt;    &lt;h1&gt;I am A&lt;&#x2F;h1&gt;    &lt;button @click&#x3D;&quot;transform&quot;&gt;send data to B&lt;&#x2F;button&gt;    &lt;p&gt;get data from B：&#123;&#123;BMessage&#125;&#125;&lt;&#x2F;p&gt;  &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;script&gt;  export default &#123;    data() &#123;      return &#123;        AMessage: &#39;Hello，B，I am A&#39;      &#125;    &#125;,    computed: &#123;      BMessage() &#123;        return this.$store.state.BMsg      &#125;    &#125;,    methods: &#123;      transform() &#123;        this.$store.commit(&#39;receiveAMsg&#39;, &#123;          AMsg: this.AMessage        &#125;)      &#125;    &#125;  &#125;&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; childB&lt;template&gt;  &lt;div id&#x3D;&quot;childB&quot;&gt;    &lt;h1&gt;I am B&lt;&#x2F;h1&gt;    &lt;button @click&#x3D;&quot;transform&quot;&gt;send data to A&lt;&#x2F;button&gt;    &lt;p&gt;get data from A：&#123;&#123;AMessage&#125;&#125;&lt;&#x2F;p&gt;  &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;script&gt;  export default &#123;    data() &#123;      return &#123;        BMessage: &#39;Hello，A，I am B&#39;      &#125;    &#125;,    computed: &#123;      AMessage() &#123;        return this.$store.state.AMsg      &#125;    &#125;,    methods: &#123;      transform() &#123;        this.$store.commit(&#39;receiveBMsg&#39;, &#123;          BMsg: this.BMessage        &#125;)      &#125;    &#125;  &#125;&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; store.jsimport Vue from &#39;vue&#39;import Vuex from &#39;vuex&#39;Vue.use(Vuex)&#x2F;&#x2F; store dataconst state &#x3D; &#123;  AMsg: &#39;&#39;,  BMsg: &#39;&#39;&#125;const mutations &#x3D; &#123;  receiveAMsg(state, payload) &#123;    state.AMsg &#x3D; payload.AMsg  &#125;,  receiveBMsg(state, payload) &#123;    state.BMsg &#x3D; payload.BMsg  &#125;&#125;export default new Vuex.Store(&#123;  state,  mutations&#125;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h3 id="四个map方法的使用"><a href="#四个map方法的使用" class="headerlink" title="四个map方法的使用"></a>四个map方法的使用</h3></li></ul><ol><li><p><strong>mapState方法：</strong>用于帮助我们映射<code>state</code>中的数据为计算属性</p><div class="code-wrapper"><pre class="line-numbers language-js" data-language="js"><code class="language-js">computed<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//借助mapState生成计算属性：sum、school、subject（对象写法）</span>     <span class="token operator">...</span><span class="token function">mapState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>sum<span class="token operator">:</span><span class="token string">'sum'</span><span class="token punctuation">,</span>school<span class="token operator">:</span><span class="token string">'school'</span><span class="token punctuation">,</span>subject<span class="token operator">:</span><span class="token string">'subject'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>             <span class="token comment">//借助mapState生成计算属性：sum、school、subject（数组写法）</span>    <span class="token operator">...</span><span class="token function">mapState</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'sum'</span><span class="token punctuation">,</span><span class="token string">'school'</span><span class="token punctuation">,</span><span class="token string">'subject'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></li><li><p><strong>mapGetters方法：</strong>用于帮助我们映射<code>getters</code>中的数据为计算属性</p><div class="code-wrapper"><pre class="line-numbers language-js" data-language="js"><code class="language-js">computed<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//借助mapGetters生成计算属性：bigSum（对象写法）</span>    <span class="token operator">...</span><span class="token function">mapGetters</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>bigSum<span class="token operator">:</span><span class="token string">'bigSum'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment">//借助mapGetters生成计算属性：bigSum（数组写法）</span>    <span class="token operator">...</span><span class="token function">mapGetters</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'bigSum'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></li><li><p><strong>mapActions方法：</strong>用于帮助我们生成与<code>actions</code>对话的方法，即：包含<code>$store.dispatch(xxx)</code>的函数</p><div class="code-wrapper"><pre class="line-numbers language-js" data-language="js"><code class="language-js">methods<span class="token operator">:</span><span class="token punctuation">&#123;</span>    <span class="token comment">//靠mapActions生成：incrementOdd、incrementWait（对象形式）</span>    <span class="token operator">...</span><span class="token function">mapActions</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>incrementOdd<span class="token operator">:</span><span class="token string">'jiaOdd'</span><span class="token punctuation">,</span>incrementWait<span class="token operator">:</span><span class="token string">'jiaWait'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token comment">//靠mapActions生成：incrementOdd、incrementWait（数组形式）</span>    <span class="token operator">...</span><span class="token function">mapActions</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'jiaOdd'</span><span class="token punctuation">,</span><span class="token string">'jiaWait'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></li><li><p><strong>mapMutations方法：</strong>用于帮助我们生成与<code>mutations</code>对话的方法，即：包含<code>$store.commit(xxx)</code>的函数</p><div class="code-wrapper"><pre class="line-numbers language-js" data-language="js"><code class="language-js">methods<span class="token operator">:</span><span class="token punctuation">&#123;</span>    <span class="token comment">//靠mapActions生成：increment、decrement（对象形式）</span>    <span class="token operator">...</span><span class="token function">mapMutations</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>increment<span class="token operator">:</span><span class="token string">'JIA'</span><span class="token punctuation">,</span>decrement<span class="token operator">:</span><span class="token string">'JIAN'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token comment">//靠mapMutations生成：JIA、JIAN（对象形式）</span>    <span class="token operator">...</span><span class="token function">mapMutations</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'JIA'</span><span class="token punctuation">,</span><span class="token string">'JIAN'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></li></ol><blockquote><p>备注：mapActions与mapMutations使用时，若需要传递参数需要：在模板中绑定事件时传递好参数，否则参数是事件对象。</p></blockquote><h3 id="模块化-命名空间"><a href="#模块化-命名空间" class="headerlink" title="模块化+命名空间"></a>模块化+命名空间</h3><ol><li><p>目的：让代码更好维护，让多种数据分类更加明确。</p></li><li><p>修改<code>store.js</code></p><div class="code-wrapper"><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> countAbout <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  namespaced<span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token comment">//开启命名空间</span>  state<span class="token operator">:</span><span class="token punctuation">&#123;</span>x<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  mutations<span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token operator">...</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  actions<span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token operator">...</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  getters<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token function">bigSum</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token keyword">return</span> state<span class="token punctuation">.</span>sum <span class="token operator">*</span> <span class="token number">10</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> personAbout <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  namespaced<span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token comment">//开启命名空间</span>  state<span class="token operator">:</span><span class="token punctuation">&#123;</span> <span class="token operator">...</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  mutations<span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token operator">...</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  actions<span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token operator">...</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  modules<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    countAbout<span class="token punctuation">,</span>    personAbout  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></li><li><p>开启命名空间后，组件中读取state数据：</p><div class="code-wrapper"><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//方式一：自己直接读取</span><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>personAbout<span class="token punctuation">.</span>list<span class="token comment">//方式二：借助mapState读取：</span><span class="token operator">...</span><span class="token function">mapState</span><span class="token punctuation">(</span><span class="token string">'countAbout'</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'sum'</span><span class="token punctuation">,</span><span class="token string">'school'</span><span class="token punctuation">,</span><span class="token string">'subject'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></li><li><p>开启命名空间后，组件中读取getters数据：</p><div class="code-wrapper"><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//方式一：自己直接读取</span><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>getters<span class="token punctuation">[</span><span class="token string">'personAbout/firstPersonName'</span><span class="token punctuation">]</span><span class="token comment">//方式二：借助mapGetters读取：</span><span class="token operator">...</span><span class="token function">mapGetters</span><span class="token punctuation">(</span><span class="token string">'countAbout'</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'bigSum'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></li><li><p>开启命名空间后，组件中调用dispatch</p><div class="code-wrapper"><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//方式一：自己直接dispatch</span><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">'personAbout/addPersonWang'</span><span class="token punctuation">,</span>person<span class="token punctuation">)</span><span class="token comment">//方式二：借助mapActions：</span><span class="token operator">...</span><span class="token function">mapActions</span><span class="token punctuation">(</span><span class="token string">'countAbout'</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>incrementOdd<span class="token operator">:</span><span class="token string">'jiaOdd'</span><span class="token punctuation">,</span>incrementWait<span class="token operator">:</span><span class="token string">'jiaWait'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></li><li><p>开启命名空间后，组件中调用commit</p><div class="code-wrapper"><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//方式一：自己直接commit</span><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'personAbout/ADD_PERSON'</span><span class="token punctuation">,</span>person<span class="token punctuation">)</span><span class="token comment">//方式二：借助mapMutations：</span><span class="token operator">...</span><span class="token function">mapMutations</span><span class="token punctuation">(</span><span class="token string">'countAbout'</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>increment<span class="token operator">:</span><span class="token string">'JIA'</span><span class="token punctuation">,</span>decrement<span class="token operator">:</span><span class="token string">'JIAN'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></li></ol><h2 id="7-localStorage-sessionStorage"><a href="#7-localStorage-sessionStorage" class="headerlink" title="7. localStorage/ sessionStorage"></a>7. localStorage/ sessionStorage</h2><p>we can read date by window.localStorage.getItem(key) and save data by window.localStorage.setItem(key,value). Remember to use JSON.parse() and JSON.stringify()</p><h2 id="8-slot"><a href="#8-slot" class="headerlink" title="8. slot"></a>8. slot</h2><ol><li>默认插槽：<div class="code-wrapper"><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">父组件中：        &lt;Category&gt;           &lt;div&gt;html结构1&lt;&#x2F;div&gt;        &lt;&#x2F;Category&gt;子组件中：        &lt;template&gt;            &lt;div&gt;               &lt;!-- 定义插槽 --&gt;               &lt;slot&gt;插槽默认内容...&lt;&#x2F;slot&gt;            &lt;&#x2F;div&gt;        &lt;&#x2F;template&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></li><li>具名插槽：<div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">父组件中：        &lt;Category&gt;            &lt;template slot&#x3D;&quot;center&quot;&gt;              &lt;div&gt;html结构1&lt;&#x2F;div&gt;            &lt;&#x2F;template&gt;            &lt;template v-slot:footer&gt;               &lt;div&gt;html结构2&lt;&#x2F;div&gt;            &lt;&#x2F;template&gt;        &lt;&#x2F;Category&gt;子组件中：        &lt;template&gt;            &lt;div&gt;               &lt;!-- 定义插槽 --&gt;               &lt;slot name&#x3D;&quot;center&quot;&gt;插槽默认内容...&lt;&#x2F;slot&gt;               &lt;slot name&#x3D;&quot;footer&quot;&gt;插槽默认内容...&lt;&#x2F;slot&gt;            &lt;&#x2F;div&gt;        &lt;&#x2F;template&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></li><li>作用域插槽：<span style="color:red">数据在组件的自身，但根据数据生成的结构需要组件的使用者来决定。</span>（games数据在Category组件中，但使用数据所遍历出来的结构由App组件决定）<div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">父组件中：&lt;Category&gt;&lt;template scope&#x3D;&quot;scopeData&quot;&gt;&lt;!-- 生成的是ul列表 --&gt;&lt;ul&gt;&lt;li v-for&#x3D;&quot;g in scopeData.games&quot; :key&#x3D;&quot;g&quot;&gt;&#123;&#123;g&#125;&#125;&lt;&#x2F;li&gt;&lt;&#x2F;ul&gt;&lt;&#x2F;template&gt;&lt;&#x2F;Category&gt;         &lt;Category&gt;&lt;template slot-scope&#x3D;&quot;scopeData&quot;&gt;&lt;!-- 生成的是h4标题 --&gt;&lt;h4 v-for&#x3D;&quot;g in scopeData.games&quot; :key&#x3D;&quot;g&quot;&gt;&#123;&#123;g&#125;&#125;&lt;&#x2F;h4&gt;&lt;&#x2F;template&gt;&lt;&#x2F;Category&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">子组件中：    &lt;template&gt;        &lt;div&gt;           &lt;slot :games&#x3D;&quot;games&quot;&gt;&lt;&#x2F;slot&gt;        &lt;&#x2F;div&gt;  &lt;&#x2F;template&gt;  &lt;script&gt;       export default &#123;           name:&#39;Category&#39;,                       props:[&#39;title&#39;],                      &#x2F;&#x2F;数据在子组件自身                         data() &#123;                          return &#123;                    games:[&#39;红色警戒                    线&#39;,&#39;劲舞团&#39;,&#39;超级玛丽&#39;]                            &#125;           &#125;,          &#125; &lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>组件通信</tag>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>视差滚动 --- Parallax Scrolling</title>
    <link href="/2021/09/07/%E8%A7%86%E5%B7%AE%E6%BB%9A%E5%8A%A8/"/>
    <url>/2021/09/07/%E8%A7%86%E5%B7%AE%E6%BB%9A%E5%8A%A8/</url>
    
    <content type="html"><![CDATA[<p>视差滚动（Parallax Scrolling）是指多层背景以不同的速度移动，形成立体的运动效果，带来非常出色的视觉体验.<br>使用css形式实现视觉差滚动效果的方式有：</p><h2 id="background-attachment"><a href="#background-attachment" class="headerlink" title="background-attachment"></a>background-attachment</h2><p>作用是设置背景图像是否固定或者随着页面的其余部分滚动.</p><ul><li>scroll：默认值，背景图像会随着页面其余部分的滚动而移动</li><li>fixed：当页面的其余部分滚动时，背景图像不会移动</li><li>inherit：继承父元素background-attachment属性的值<br>完成滚动视觉差就需要将background-attachment属性设置为fixed，让背景相对于视口固定。及时一个元素有滚动机制，背景也不会随着元素的内容而滚动<div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">section &#123;    height: 100vh;&#125;.g-img &#123;    background-image: url(...);    background-attachment: fixed;    background-size: cover;    background-position: center center;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h2 id="transform-translate3D"><a href="#transform-translate3D" class="headerlink" title="transform:translate3D"></a>transform:translate3D</h2>transform: css3 属性，可以对元素进行变换(2d/3d)，包括平移 translate,旋转 rotate,缩放 scale,等等.<br>perspective: css3 属性，当元素涉及 3d 变换时，perspective 可以定义我们眼睛看到的 3d 立体效果，即空间感.</li></ul><p>原理如下：</p><ul><li>容器设置上 transform-style: preserve-3d 和 perspective: xpx，那么处于这个容器的子元素就将位于3D空间中</li><li>子元素设置不同的 transform: translateZ()，这个时候，不同元素在 3D Z轴方向距离屏幕（我们的眼睛）的距离也就不一样</li><li>滚动滚动条，由于子元素设置了不同的 transform: translateZ()，那么他们滚动的上下距离 translateY 相对屏幕（我们的眼睛），也是不一样的，这就达到了滚动视差的效果,<div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">&lt;style&gt;    html &#123;        overflow: hidden;        height: 100%    &#125;    body &#123;        &#x2F;* 视差元素的父级需要3D视角 *&#x2F;        perspective: 1px;        transform-style: preserve-3d;         height: 100%;        overflow-y: scroll;        overflow-x: hidden;    &#125;    #app&#123;        width: 100vw;        height:200vh;        background:skyblue;        padding-top:100px;    &#125;    .one&#123;        width:500px;        height:200px;        background:#409eff;        transform: translateZ(0px);        margin-bottom: 50px;    &#125;    .two&#123;        width:500px;        height:200px;        background:#67c23a;        transform: translateZ(-1px);        margin-bottom: 150px;    &#125;    .three&#123;        width:500px;        height:200px;        background:#e6a23c;        transform: translateZ(-2px);        margin-bottom: 150px;    &#125;&lt;&#x2F;style&gt;&lt;div id&#x3D;&quot;app&quot;&gt;    &lt;div class&#x3D;&quot;one&quot;&gt;one&lt;&#x2F;div&gt;    &lt;div class&#x3D;&quot;two&quot;&gt;two&lt;&#x2F;div&gt;    &lt;div class&#x3D;&quot;three&quot;&gt;three&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>CSS</tag>
      
      <tag>Layout</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>响应式布局 Resposive Web Design</title>
    <link href="/2021/08/27/responsive-layout/"/>
    <url>/2021/08/27/responsive-layout/</url>
    
    <content type="html"><![CDATA[<p>响应式网站设计（Responsive Web design）是一种网络页面设计布局，页面的设计与开发应当根据用户行为以及设备环境(系统平台、屏幕尺寸、屏幕定向等)进行相应的响应和调整</p><h2 id="Media-Query"><a href="#Media-Query" class="headerlink" title="Media Query"></a>Media Query</h2><p>Media query breakpoints are pixel values that a developer/designer can define in CSS. <span id="more"></span> When a responsive website reaches those pixel values, a transformation (such as the one detailed above) occurs so that the website offers an optimal user experience.</p><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">&#x2F;* Medium devices (landscape tablets, 768px and up) *&#x2F;@media only screen and (min-width: 768px) &#123;...&#125;&#x2F;* Large devices (laptops&#x2F;desktops, 992px and up) *&#x2F;@media only screen and (min-width: 992px) &#123;...&#125;&#x2F;* Extra large devices (large laptops and desktops, 1200px and up) *&#x2F;@media only screen and (min-width: 1200px) &#123;...&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h3 id="Use-percentage-rather-than-‘px’"><a href="#Use-percentage-rather-than-‘px’" class="headerlink" title="Use percentage rather than ‘px’"></a>Use percentage rather than ‘px’</h3><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">@media screen and (max-width: 414px) &#123;    aside &#123;      float: none;      width: 100%;      height: 5%;      background-color: yellow;    &#125;    main &#123;      height: calc(100vh - 5%);      background-color: red;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h2 id="Em-and-Rem"><a href="#Em-and-Rem" class="headerlink" title="Em and Rem"></a>Em and Rem</h2><p>The default font size in browsers is 16px, so 1em=16px，10px=0.625em。To make it easy, we defined Font-size=62.5% in css, then 12px=1.2em, 10px=1em. Thus, if you want to update the normal ‘px’,simply divided by 10 and adding ‘px’.</p><p>The diffrence between em and rem is: em is calculated according to parent node, while rem is according to root components, which is html. So, we normally set font-size firstly, then…</p><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">html &#123;    font-size: 10px;    &#125;div &#123;    font-size: 4rem; &#x2F;* 40px *&#x2F;    width: 30rem;  &#x2F;* 300px *&#x2F;    height: 30rem;    border: solid 1px black;&#125;p &#123;    font-size: 2rem; &#x2F;* 20px *&#x2F;    width: 15rem;    height: 15rem;    border: solid 1px red;&#125;span &#123;    font-size: 1.5rem;    width: 10rem;    height: 10rem;    border: solid 1px blue;    display: block;&#125; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h2 id="Flex-Layout"><a href="#Flex-Layout" class="headerlink" title="Flex Layout"></a>Flex Layout</h2><p>flex box has always been used as one-dimention layout.</p><h3 id="flex-direction"><a href="#flex-direction" class="headerlink" title="flex-direction"></a>flex-direction</h3><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">.box &#123;  flex-direction: row | row-reverse | column | column-reverse;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div><h3 id="flex-wrap"><a href="#flex-wrap" class="headerlink" title="flex-wrap"></a>flex-wrap</h3><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">.box&#123;  flex-wrap: nowrap | wrap | wrap-reverse;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div><h3 id="flex-flow"><a href="#flex-flow" class="headerlink" title="flex-flow"></a>flex-flow</h3><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; we can combine flex direction and wrape.box &#123;  flex-flow: &lt;flex-direction&gt; || &lt;flex-wrap&gt;;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div><h3 id="justify-content-and-align-items"><a href="#justify-content-and-align-items" class="headerlink" title="justify-content and align-items"></a>justify-content and align-items</h3><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">.box &#123;  align-items: flex-start | flex-end | center | baseline | stretch;&#125;.box &#123;  align-content: flex-start | flex-end | center | space-between | space-around | stretch;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h3 id="align-content"><a href="#align-content" class="headerlink" title="align-content"></a>align-content</h3><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">.box &#123;  align-content: flex-start | flex-end | center | space-between | space-around | stretch;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div><h3 id="order"><a href="#order" class="headerlink" title="order"></a>order</h3><p>set the order of box</p><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">.item &#123;  order: 1;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div><h3 id="flex-grow-flex-shrink"><a href="#flex-grow-flex-shrink" class="headerlink" title="flex-grow/flex-shrink"></a>flex-grow/flex-shrink</h3><p>When there are more spaces, boxes will get bigger as defined. 0 is default.</p><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">.item1&#123;    &#x2F;&#x2F; item1 will get  more 1&#x2F;3    flex-grow: 1&#125;.item2&#123;    &#x2F;&#x2F; item2 will get more 2&#x2F;3    flex-grow: 2&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h3 id="flex-basis"><a href="#flex-basis" class="headerlink" title="flex-basis"></a>flex-basis</h3><p>It defines the original size before resizing.We can also use flex-grow, shrink, basis togather.</p><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">.item &#123;    &#x2F;&#x2F; grow or shrink equally  flex: 1 1 auto&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div><h2 id="Grid"><a href="#Grid" class="headerlink" title="Grid"></a>Grid</h2><p>Grid is a good way for two-dimention layout. We can named every space and lines which is easier to manage.</p><h3 id="grid-template-columns-grid-template-rows"><a href="#grid-template-columns-grid-template-rows" class="headerlink" title="grid-template-columns/grid-template-rows"></a>grid-template-columns/grid-template-rows</h3><p>It has been divided to 3 * 4, we can set actual space ‘px’,percentage or auto for each.</p><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">.container &#123;    grid-template-columns: 80px auto 100px;    grid-template-rows: 25% 100px auto 60px;&#125;.container &#123;    grid-template-columns: [line1] 80px [line2] 100px [last-line];&#125;&#x2F;&#x2F; using repeat.container &#123;    grid-template-columns: repeat(3,10px)&#125;&#x2F;&#x2F; using fr, it means we divied to 3 equal parts.container &#123;    grid-template-columns: repeat(3,1fr)&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h3 id="grid-template-areas"><a href="#grid-template-areas" class="headerlink" title="grid-template-areas"></a>grid-template-areas</h3><p>we named different areas as following</p><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">.container &#123;    grid-template-columns: 1fr 1fr 1fr;    grid-template-rows: 1fr 1fr 1fr 1fr;    grid-template-areas:         &quot;a a a&quot;        &quot;b c c&quot;        &quot;b c c&quot;        &quot;d d d&quot;;&#125;&#x2F;&#x2F; for div.a &#123; grid-area: a; &#125;.b &#123; grid-area: b; &#125;.c &#123; grid-area: c; &#125;.d &#123; grid-area: d; &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h3 id="grid-column-gap和grid-row-gap"><a href="#grid-column-gap和grid-row-gap" class="headerlink" title="grid-column-gap和grid-row-gap"></a>grid-column-gap和grid-row-gap</h3><p>It defines the margin between item.</p><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">.container &#123;    grid-template-columns: 2fr 1fr;    grid-template-rows: 1fr 2fr;    grid-column-gap: 10px;    grid-row-gap: 15px;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h3 id="minmax"><a href="#minmax" class="headerlink" title="minmax"></a>minmax</h3><p>It is really useful when we want to do repositive design. The following means that minimum width is 150, equally divied other space. </p><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">.container &#123;    display: grid;    grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div>]]></content>
    
    
    
    <tags>
      
      <tag>CSS</tag>
      
      <tag>Layout</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何居中 --- Center Position</title>
    <link href="/2021/07/21/%E5%B1%85%E4%B8%AD-Center/"/>
    <url>/2021/07/21/%E5%B1%85%E4%B8%AD-Center/</url>
    
    <content type="html"><![CDATA[<h2 id="实现元素水平垂直居中的方式："><a href="#实现元素水平垂直居中的方式：" class="headerlink" title="实现元素水平垂直居中的方式："></a>实现元素水平垂直居中的方式：</h2><h3 id="利用定位-positon-margin-auto"><a href="#利用定位-positon-margin-auto" class="headerlink" title="利用定位 positon+margin:auto"></a>利用定位 positon+margin:auto</h3><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">&lt;style&gt;    .father&#123;        position: relative;    &#125;    .son&#123;        position: absolute;        top:0;        left:0;        right:0;        bottom:0;        margin:auto;    &#125;&lt;&#x2F;style&gt;&lt;div class&#x3D;&quot;father&quot;&gt;    &lt;div class&#x3D;&quot;son&quot;&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h3 id="利用定位-transform"><a href="#利用定位-transform" class="headerlink" title="利用定位+transform"></a>利用定位+transform</h3><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">&lt;style&gt;    .father &#123;        position: relative;    &#125;    .son &#123;        position: absolute;        top: 50%;        left: 50%;        transform: translate(-50%,-50%);    &#125;&lt;&#x2F;style&gt;&lt;div class&#x3D;&quot;father&quot;&gt;    &lt;div class&#x3D;&quot;son&quot;&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h3 id="table布局"><a href="#table布局" class="headerlink" title="table布局"></a>table布局</h3><p>设置父元素为display:table-cell，子元素设置 display: inline-block。利用vertical和text-align可以让所有的行内块级元素水平垂直居中</p><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">&lt;style&gt;    .father &#123;        display: table-cell;        vertical-align: middle;        text-align: center;    &#125;    .son &#123;        display: inline-block;    &#125;&lt;&#x2F;style&gt;&lt;div class&#x3D;&quot;father&quot;&gt;    &lt;div class&#x3D;&quot;son&quot;&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h3 id="flex布局"><a href="#flex布局" class="headerlink" title="flex布局"></a>flex布局</h3><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">&lt;style&gt;    .father &#123;        display: flex;        justify-content: center;        align-items: center;    &#125;    .son &#123;        width: 100px;        height: 100px;    &#125;&lt;&#x2F;style&gt;&lt;div class&#x3D;&quot;father&quot;&gt;    &lt;div class&#x3D;&quot;son&quot;&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h3 id="grid布局"><a href="#grid布局" class="headerlink" title="grid布局"></a>grid布局</h3><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">&lt;style&gt;    .father &#123;            display: grid;            align-items:center;            justify-content: center;        &#125;        .son &#123;            width: 10px;            height: 10px;        &#125;&lt;&#x2F;style&gt;&lt;div class&#x3D;&quot;father&quot;&gt;    &lt;div class&#x3D;&quot;son&quot;&gt;&lt;&#x2F;div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h3 id="内联元素居中布局-inline-element"><a href="#内联元素居中布局-inline-element" class="headerlink" title="内联元素居中布局 inline-element"></a>内联元素居中布局 inline-element</h3><h4 id="水平居中-horizontal"><a href="#水平居中-horizontal" class="headerlink" title="水平居中 horizontal"></a>水平居中 horizontal</h4><ul><li>行内元素可设置：text-align: center</li><li>flex布局设置父元素：display: flex; justify-content: center<h4 id="垂直居中-vertical"><a href="#垂直居中-vertical" class="headerlink" title="垂直居中 vertical"></a>垂直居中 vertical</h4></li><li>单行文本父元素确认高度：height === line-height</li><li>多行文本父元素确认高度：disaply: table-cell; vertical-align: middle</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>CSS</tag>
      
      <tag>Layout</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Layout 常见布局</title>
    <link href="/2021/07/21/%E5%B8%B8%E8%A7%81%E5%B8%83%E5%B1%80-Layout/"/>
    <url>/2021/07/21/%E5%B8%B8%E8%A7%81%E5%B8%83%E5%B1%80-Layout/</url>
    
    <content type="html"><![CDATA[<h2 id="Two-Components"><a href="#Two-Components" class="headerlink" title="Two Components"></a>Two Components</h2><h3 id="By-float"><a href="#By-float" class="headerlink" title="By float"></a>By float</h3><p>双栏布局非常常见，往往是以一个定宽栏和一个自适应的栏并排展示存在 </p><ul><li>使用 float 左浮左边栏 set float on the left component</li><li>右边模块使用 margin-left 撑出内容块做内容展示 set margin-left on the right one</li><li>为父级元素添加BFC，防止下方元素飞到上方内容 add BFC on the container<div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">&lt;style&gt;    .box&#123;        overflow: hidden; 添加BFC    &#125;    .left &#123;        float: left;        width: 200px;        background-color: gray;        height: 400px;    &#125;    .right &#123;        margin-left: 210px;        background-color: lightgray;        height: 200px;    &#125;&lt;&#x2F;style&gt;&lt;div class&#x3D;&quot;box&quot;&gt;    &lt;div class&#x3D;&quot;left&quot;&gt;左边&lt;&#x2F;div&gt;    &lt;div class&#x3D;&quot;right&quot;&gt;右边&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h3 id="By-flex"><a href="#By-flex" class="headerlink" title="By flex"></a>By flex</h3>flex可以说是最好的方案了，代码少，使用简单,注意的是，flex容器的一个默认属性值:align-items: stretch;这个属性导致了列等高的效果。 为了让两个盒子高度自动，需要设置: align-items: flex-start;<br>It is easier to use ‘flex’. While, there is a default property ‘align-items: stretch’, we will need set ‘flex-start’ to avoid stretch.<div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">&lt;style&gt;    .box&#123;        display: flex;    &#125;    .left &#123;        width: 100px;    &#125;    .right &#123;        flex: 1;    &#125;&lt;&#x2F;style&gt;&lt;div class&#x3D;&quot;box&quot;&gt;    &lt;div class&#x3D;&quot;left&quot;&gt;左边&lt;&#x2F;div&gt;    &lt;div class&#x3D;&quot;right&quot;&gt;右边&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h2 id="Three-Components"><a href="#Three-Components" class="headerlink" title="Three Components"></a>Three Components</h2></li></ul><h3 id="两边使用-float-或者-absolute，中间使用-margin。"><a href="#两边使用-float-或者-absolute，中间使用-margin。" class="headerlink" title="两边使用 float 或者 absolute，中间使用 margin。"></a>两边使用 float 或者 absolute，中间使用 margin。</h3><p>For the sides, we use float/absolute and use margin to control middle element.</p><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">&lt;style&gt;    .wrap &#123;        background: #eee;        overflow: hidden; &lt;!-- 生成BFC，计算高度时考虑浮动的元素 --&gt;        padding: 20px;        height: 200px;    &#125;    .left &#123;        width: 200px;        height: 200px;        float: left;        background: coral;    &#125;    .right &#123;        width: 120px;        height: 200px;        float: right;        background: lightblue;    &#125;    .middle &#123;        margin-left: 220px;        height: 200px;        background: lightpink;        margin-right: 140px;    &#125;&lt;&#x2F;style&gt;&lt;div class&#x3D;&quot;wrap&quot;&gt;    &lt;div class&#x3D;&quot;left&quot;&gt;左侧&lt;&#x2F;div&gt;    &lt;div class&#x3D;&quot;right&quot;&gt;右侧&lt;&#x2F;div&gt;    &lt;div class&#x3D;&quot;middle&quot;&gt;中间&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h3 id="Display-table-实现"><a href="#Display-table-实现" class="headerlink" title="Display: table 实现"></a>Display: table 实现</h3><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">&lt;style&gt;  .container &#123;    height: 200px;    line-height: 200px;    text-align: center;    display: table;    table-layout: fixed;    width: 100%;  &#125;  .left,  .right,  .main &#123;    display: table-cell;  &#125;  .left,  .right &#123;    width: 100px;    background: green;  &#125;  .main &#123;    background: black;    color: white;    width: 100%;  &#125;&lt;&#x2F;style&gt;&lt;div class&#x3D;&quot;container&quot;&gt;  &lt;div class&#x3D;&quot;left&quot;&gt;左边固定宽度&lt;&#x2F;div&gt;  &lt;div class&#x3D;&quot;main&quot;&gt;中间自适应&lt;&#x2F;div&gt;  &lt;div class&#x3D;&quot;right&quot;&gt;右边固定宽度&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h3 id="Flex实现"><a href="#Flex实现" class="headerlink" title="Flex实现"></a>Flex实现</h3><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">&lt;style type&#x3D;&quot;text&#x2F;css&quot;&gt;    .wrap &#123;        display: flex;        justify-content: space-between;    &#125;    .left,    .right,    .middle &#123;        height: 100px;    &#125;    .left &#123;        width: 200px;        background: coral;    &#125;    .right &#123;        width: 120px;        background: lightblue;    &#125;    .middle &#123;        background: #555;        width: 100%;        margin: 0 20px;    &#125;&lt;&#x2F;style&gt;&lt;div class&#x3D;&quot;wrap&quot;&gt;    &lt;div class&#x3D;&quot;left&quot;&gt;左侧&lt;&#x2F;div&gt;    &lt;div class&#x3D;&quot;middle&quot;&gt;中间&lt;&#x2F;div&gt;    &lt;div class&#x3D;&quot;right&quot;&gt;右侧&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h3 id="Grid网格布局"><a href="#Grid网格布局" class="headerlink" title="Grid网格布局"></a>Grid网格布局</h3><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">&lt;style&gt;    .wrap &#123;        display: grid;        width: 100%;        grid-template-columns: 300px auto 300px;    &#125;    .left,    .right,    .middle &#123;        height: 100px;    &#125;    .left &#123;        background: coral;    &#125;    .right &#123;        width: 300px;        background: lightblue;    &#125;    .middle &#123;        background: #555;    &#125;&lt;&#x2F;style&gt;&lt;div class&#x3D;&quot;wrap&quot;&gt;    &lt;div class&#x3D;&quot;left&quot;&gt;左侧&lt;&#x2F;div&gt;    &lt;div class&#x3D;&quot;middle&quot;&gt;中间&lt;&#x2F;div&gt;    &lt;div class&#x3D;&quot;right&quot;&gt;右侧&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div>]]></content>
    
    
    
    <tags>
      
      <tag>CSS</tag>
      
      <tag>Layout</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>BFC</title>
    <link href="/2021/07/01/BFC/"/>
    <url>/2021/07/01/BFC/</url>
    
    <content type="html"><![CDATA[<h2 id="BFC（Block-Formatting-Context），即块级格式化上下文，它是页面中的一块渲染区域，并且有一套属于自己的渲染规则："><a href="#BFC（Block-Formatting-Context），即块级格式化上下文，它是页面中的一块渲染区域，并且有一套属于自己的渲染规则：" class="headerlink" title="BFC（Block Formatting Context），即块级格式化上下文，它是页面中的一块渲染区域，并且有一套属于自己的渲染规则："></a>BFC（Block Formatting Context），即块级格式化上下文，它是页面中的一块渲染区域，并且有一套属于自己的渲染规则：</h2><ul><li>内部的盒子会在垂直方向上一个接一个的放置</li><li>对于同一个BFC的俩个相邻的盒子的margin会发生重叠，与方向无关。</li><li>每个元素的左外边距与包含块的左边界相接触（从左到右），即使浮动元素也是如此</li><li>BFC的区域不会与float的元素区域重叠</li><li>计算BFC的高度时，浮动子元素也参与计算</li><li>BFC就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素，反之亦然</li><li>BFC目的是形成一个相对于外界完全独立的空间，让内部的子元素不会影响到外部的元素</li></ul><h2 id="触发BFC的条件包含不限于："><a href="#触发BFC的条件包含不限于：" class="headerlink" title="触发BFC的条件包含不限于："></a>触发BFC的条件包含不限于：</h2><ul><li>根元素，即HTML元素</li><li>浮动元素：float值为left、right</li><li>overflow值不为 visible，为 auto、scroll、hidden</li><li>display的值为inline-block、inltable-cell、table-caption、table、inline-table、flex、inline-flex、grid、inline-grid</li><li>position的值为absolute或fixed</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>CSS</tag>
      
      <tag>Layout</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>React Router</title>
    <link href="/2021/07/01/React-Router/"/>
    <url>/2021/07/01/React-Router/</url>
    
    <content type="html"><![CDATA[<h2 id="路由的基本使用-Basic-Usage"><a href="#路由的基本使用-Basic-Usage" class="headerlink" title="路由的基本使用 Basic Usage"></a>路由的基本使用 Basic Usage</h2><p>1.明确好界面中的导航区、展示区<br>2.导航区的a标签改为Link标签</p><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">&lt;Link to&#x3D;&quot;&#x2F;xxxxx&quot;&gt;Demo&lt;&#x2F;Link&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p>3.展示区写Route标签进行路径的匹配</p><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">&lt;Route path&#x3D;&#39;&#x2F;xxxx&#39; component&#x3D;&#123;Demo&#125;&#x2F;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p>4.<App>的最外侧包裹了一个<BrowserRouter>或<HashRouter></p><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">import React from &#39;react&#39;;import About from &#39;.&#x2F;components&#x2F;RouterDemo&#x2F;About&#39;;import Home from &#39;.&#x2F;components&#x2F;RouterDemo&#x2F;Home&#39;import &#123;NavLink,Route,Switch&#125; from &#39;react-router-dom&#39;import MyNavLink from &#39;.&#x2F;MyNavLink&#39;class App extends React.Component&#123;  render()&#123;    return (      &lt;div&gt;        &lt;MyNavLink to&#x3D;&#39;&#x2F;home&#39;&gt;Home&lt;&#x2F;MyNavLink&gt;        &lt;Switch&gt;        &lt;Route path&#x3D;&#39;&#x2F;home&#39; component&#x3D;&#123;Home&#125;&#x2F;&gt;        &lt;&#x2F;Switch&gt;              &lt;&#x2F;div&gt;    )  &#125;&#125;export default App;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h2 id="路由组件与一般组件-Router-Components-vs-Normal-Components"><a href="#路由组件与一般组件-Router-Components-vs-Normal-Components" class="headerlink" title="路由组件与一般组件 Router Components vs Normal Components"></a>路由组件与一般组件 Router Components vs Normal Components</h2><p>1.写法不同：</p><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">&lt;Demo&#x2F;&gt;&lt;Route path&#x3D;&quot;&#x2F;demo&quot; component&#x3D;&#123;Demo&#125;&#x2F;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div><p>2.存放位置不同：</p><ul><li>一般组件：components</li><li>路由组件：pages</li></ul><p>3.接收到的props不同：</p><ul><li>一般组件：写组件标签时传递了什么，就能收到什么</li><li>路由组件：接收到三个固定的属性<div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">history:- go: ƒ go(n)- goBack: ƒ goBack()- goForward: ƒ goForward()- push: ƒ push(path, state)- replace: ƒ replace(path, state)location:- pathname: &quot;&#x2F;about&quot;- search: &quot;&quot;state: undefinedmatch:- params: &#123;&#125;- path: &quot;&#x2F;about&quot;- url: &quot;&#x2F;about&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h2 id="NavLink与封装NavLink"><a href="#NavLink与封装NavLink" class="headerlink" title="NavLink与封装NavLink"></a>NavLink与封装NavLink</h2>NavLink可以实现路由链接的高亮，通过activeClassName指定样式名<div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">import React, &#123; Component &#125; from &#39;react&#39;import &#123; NavLink &#125; from &quot;react-router-dom&quot;;export default class MyNavLink extends Component &#123;    render() &#123;        return (            &lt;div&gt;              &lt;NavLink to&#x3D;&#39;&#x2F;home&#39; &#123;...this.props&#125;&gt;&lt;&#x2F;NavLink&gt;            &lt;&#x2F;div&gt;        )    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h2 id="Switch的使用"><a href="#Switch的使用" class="headerlink" title="Switch的使用"></a>Switch的使用</h2></li></ul><p>1.通常情况下，path和component是一一对应的关系。<br>2.Switch可以提高路由匹配效率(单一匹配)。</p><h2 id="路由的严格匹配与模糊匹配"><a href="#路由的严格匹配与模糊匹配" class="headerlink" title="路由的严格匹配与模糊匹配"></a>路由的严格匹配与模糊匹配</h2><p>1.默认使用的是模糊匹配（简单记：【输入的路径】必须包含要【匹配的路径】，且顺序要一致）<br>2.开启严格匹配：<Route exact={true} path="/about" component={About}/><br>3.严格匹配不要随便开启，需要再开，有些时候开启会导致无法继续匹配二级路由</p><h2 id="Redirect的使用"><a href="#Redirect的使用" class="headerlink" title="Redirect的使用"></a>Redirect的使用</h2><p>1.一般写在所有路由注册的最下方，当所有路由都无法匹配时，跳转到Redirect指定的路由<br>2.具体编码：</p><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">&lt;Switch&gt;&lt;Route path&#x3D;&quot;&#x2F;about&quot; component&#x3D;&#123;About&#125;&#x2F;&gt;&lt;Route path&#x3D;&quot;&#x2F;home&quot; component&#x3D;&#123;Home&#125;&#x2F;&gt;&lt;Redirect to&#x3D;&quot;&#x2F;about&quot;&#x2F;&gt;&lt;&#x2F;Switch&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h2 id="嵌套路由"><a href="#嵌套路由" class="headerlink" title="嵌套路由"></a>嵌套路由</h2><p>1.注册子路由时要写上父路由的path值<br>2.路由的匹配是按照注册路由的顺序进行的</p><h2 id="向路由组件传递参数"><a href="#向路由组件传递参数" class="headerlink" title="向路由组件传递参数"></a>向路由组件传递参数</h2><h3 id="Params参数"><a href="#Params参数" class="headerlink" title="Params参数"></a>Params参数</h3><p>路由链接(携带参数)</p><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">&lt;Link to&#x3D;&#39;&#x2F;demo&#x2F;test&#x2F;tom&#x2F;18&#39;&#125;&gt;详情&lt;&#x2F;Link&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p>注册路由(声明接收)</p><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">&lt;Route path&#x3D;&quot;&#x2F;demo&#x2F;test&#x2F;:name&#x2F;:age&quot; component&#x3D;&#123;Test&#125;&#x2F;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p>接收参数:this.props.match.params</p><h3 id="search参数"><a href="#search参数" class="headerlink" title="search参数"></a>search参数</h3><p>路由链接(携带参数)</p><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">&lt;Link to&#x3D;&#39;&#x2F;demo&#x2F;test?name&#x3D;tom&amp;age&#x3D;18&#39;&#125;&gt;详情&lt;&#x2F;Link&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p>注册路由(无需声明，正常注册即可)：</p><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">&lt;Route path&#x3D;&quot;&#x2F;demo&#x2F;test&quot; component&#x3D;&#123;Test&#125;&#x2F;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p>接收参数：this.props.location.search<br>    备注：获取到的search是urlencoded编码字符串，需要借助querystring解析</p><h3 id="state参数"><a href="#state参数" class="headerlink" title="state参数"></a>state参数</h3><p>路由链接(携带参数)</p><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">&lt;Link to&#x3D;&#123;&#123;pathname:&#39;&#x2F;demo&#x2F;test&#39;,state:&#123;name:&#39;tom&#39;,age:18&#125;&#125;&#125;&gt;详情&lt;&#x2F;Link&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p>注册路由(无需声明，正常注册即可)</p><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">&lt;Route path&#x3D;&quot;&#x2F;demo&#x2F;test&quot; component&#x3D;&#123;Test&#125;&#x2F;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p>接收参数：this.props.location.state<br>    备注：刷新也可以保留住参数</p><h2 id="编程式路由导航"><a href="#编程式路由导航" class="headerlink" title="编程式路由导航"></a>编程式路由导航</h2><p>借助this.prosp.history对象上的API对操作路由跳转、前进、后退</p><ul><li>this.prosp.history.push()</li><li>this.prosp.history.replace()</li><li>this.prosp.history.goBack()</li><li>this.prosp.history.goForward()</li><li>this.prosp.history.go()    </li></ul><h2 id="withRouter-在一般组件里使用路由组件API"><a href="#withRouter-在一般组件里使用路由组件API" class="headerlink" title="withRouter 在一般组件里使用路由组件API"></a>withRouter 在一般组件里使用路由组件API</h2><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">import &#123;withRouter&#125; from &#39;react-router-dom&#39;class A extends React.Component&#123;&#125;export default withRouter(A)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h2 id="BrowserRouter与HashRouter的区别"><a href="#BrowserRouter与HashRouter的区别" class="headerlink" title="BrowserRouter与HashRouter的区别"></a>BrowserRouter与HashRouter的区别</h2><ul><li>底层原理不一样：<br>BrowserRouter使用的是H5的history API，不兼容IE9及以下版本。<br>HashRouter使用的是URL的哈希值。</li><li>path表现形式不一样<br>BrowserRouter的路径中没有#,例如：localhost:3000/demo/test<br>HashRouter的路径包含#,例如：localhost:3000/#/demo/test</li><li>刷新后对路由state参数的影响<br>BrowserRouter没有任何影响，因为state保存在history对象中。<br>HashRouter刷新后会导致路由state参数的丢失！！！</li><li>备注：HashRouter可以用于解决一些路径错误相关的问题。</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>React</tag>
      
      <tag>Router</tag>
      
      <tag>路由</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>TypeScript</title>
    <link href="/2021/05/11/TypeScript/"/>
    <url>/2021/05/11/TypeScript/</url>
    
    <content type="html"><![CDATA[<h2 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h2><p>类型声明</p><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">typescript    let 变量: 类型;        let 变量: 类型 &#x3D; 值;        function fn(参数: 类型, 参数: 类型): 类型&#123;        ...    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>类型：</p><table><thead><tr><th align="center">类型</th><th align="center">例子</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">number</td><td align="center">1, -33, 2.5</td><td align="center">任意数字</td></tr><tr><td align="center">string</td><td align="center">‘hi’, “hi”, <code>hi</code></td><td align="center">任意字符串</td></tr><tr><td align="center">boolean</td><td align="center">true、false</td><td align="center">布尔值true或false</td></tr><tr><td align="center">字面量</td><td align="center">其本身</td><td align="center">限制变量的值就是该字面量的值</td></tr><tr><td align="center">any</td><td align="center">*</td><td align="center">任意类型</td></tr><tr><td align="center">unknown</td><td align="center">*</td><td align="center">类型安全的any</td></tr><tr><td align="center">void</td><td align="center">空值（undefined）</td><td align="center">没有值（或undefined）</td></tr><tr><td align="center">never</td><td align="center">没有值</td><td align="center">不能是任何值</td></tr><tr><td align="center">object</td><td align="center">{name:’孙悟空’}</td><td align="center">任意的JS对象</td></tr><tr><td align="center">array</td><td align="center">[1,2,3]</td><td align="center">任意JS数组</td></tr><tr><td align="center">tuple</td><td align="center">[4,5]</td><td align="center">元素，TS新增类型，固定长度数组</td></tr><tr><td align="center">enum</td><td align="center">enum{A, B}</td><td align="center">枚举，TS中新增类型</td></tr></tbody></table><ul><li>number</li></ul><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">typescript    let decimal: number &#x3D; 6;    let hex: number &#x3D; 0xf00d;    let binary: number &#x3D; 0b1010;    let octal: number &#x3D; 0o744;    let big: bigint &#x3D; 100n;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><ul><li>boolean</li></ul><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">typescript    let isDone: boolean &#x3D; false;   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div><ul><li>string</li></ul><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">typescript    let color: string &#x3D; &quot;blue&quot;;    color &#x3D; &#39;red&#39;;        let fullName: string &#x3D; &#96;Bob Bobbington&#96;;    let age: number &#x3D; 37;    let sentence: string &#x3D; &#96;Hello, my name is $&#123;fullName&#125;.        I&#39;ll be $&#123;age + 1&#125; years old next month.&#96;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><ul><li>字面量<br>也可以使用字面量去指定变量的类型，通过字面量可以确定变量的取值范围</li></ul><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">typescript   let color: &#39;red&#39; | &#39;blue&#39; | &#39;black&#39;;   let num: 1 | 2 | 3 | 4 | 5;   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div><ul><li>any</li></ul><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">typescript    let d: any &#x3D; 4;    d &#x3D; &#39;hello&#39;;    d &#x3D; true;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div><ul><li>unknown</li></ul><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">typescript    let notSure: unknown &#x3D; 4;    notSure &#x3D; &#39;hello&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div><ul><li>void</li></ul><div class="code-wrapper"><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">let</span> unusable<span class="token operator">:</span> <span class="token keyword">void</span> <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><ul><li>never</li></ul><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">typescript    function error(message: string): never &#123;      throw new Error(message);    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div><ul><li>object（没啥用）</li></ul><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">typescript    let obj: object &#x3D; &#123;&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div><ul><li>array</li></ul><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">typescript    let list: number[] &#x3D; [1, 2, 3];    let list: Array&lt;number&gt; &#x3D; [1, 2, 3];<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div><ul><li>tuple</li></ul><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">typescript    let x: [string, number];    x &#x3D; [&quot;hello&quot;, 10]; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div><ul><li>enum</li></ul><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">typescript    enum Color &#123;      Red,      Green,      Blue,    &#125;    let c: Color &#x3D; Color.Green;        enum Color &#123;      Red &#x3D; 1,      Green,      Blue,    &#125;    let c: Color &#x3D; Color.Green;        enum Color &#123;      Red &#x3D; 1,      Green &#x3D; 2,      Blue &#x3D; 4,    &#125;    let c: Color &#x3D; Color.Green;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><ul><li>类型断言</li></ul><p>有些情况下，变量的类型对于我们来说是很明确，但是TS编译器却并不清楚，此时，可以通过类型断言来告诉编译器变量的类型，断言有两种形式：</p><ul><li>第一种</li></ul><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">typescript        let someValue: unknown &#x3D; &quot;this is a string&quot;;        let strLength: number &#x3D; (someValue as string).length;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div><ul><li>第二种</li></ul><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">typescript        let someValue: unknown &#x3D; &quot;this is a string&quot;;        let strLength: number &#x3D; (&lt;string&gt;someValue).length;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div><h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><p>面向对象是程序中一个非常重要的思想，它被很多同学理解成了一个比较难，比较深奥的问题，其实不然。面向对象很简单，简而言之就是程序之中所有的操作都需要通过对象来完成。</p><ul><li>举例来说：<ul><li>操作浏览器要使用window对象</li><li>操作网页要使用document对象</li><li>操作控制台要使用console对象</li></ul></li></ul><p>一切操作都要通过对象，也就是所谓的面向对象，那么对象到底是什么呢？这就要先说到程序是什么，计算机程序的本质就是对现实事物的抽象，抽象的反义词是具体，比如：照片是对一个具体的人的抽象，汽车模型是对具体汽车的抽象等等。程序也是对事物的抽象，在程序中我们可以表示一个人、一条狗、一把枪、一颗子弹等等所有的事物。一个事物到了程序中就变成了一个对象。</p><p>在程序中所有的对象都被分成了两个部分数据和功能，以人为例，人的姓名、性别、年龄、身高、体重等属于数据，人可以说话、走路、吃饭、睡觉这些属于人的功能。数据在对象中被成为属性，而功能就被称为方法。所以简而言之，在程序中一切皆是对象。</p><h2 id="1、类（class）"><a href="#1、类（class）" class="headerlink" title="1、类（class）"></a>1、类（class）</h2><p>要想面向对象，操作对象，首先便要拥有对象，那么下一个问题就是如何创建对象。要创建对象，必须要先定义类，所谓的类可以理解为对象的模型，程序中可以根据类创建指定类型的对象，举例来说：可以通过Person类来创建人的对象，通过Dog类创建狗的对象，通过Car类来创建汽车的对象，不同的类可以用来创建不同的对象。</p><ul><li><p>定义类：</p><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">typescript  class 类名 &#123;  属性名: 类型;    constructor(参数: 类型)&#123;  this.属性名 &#x3D; 参数;  &#125;    方法名()&#123;  ....  &#125;    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></li><li><p>示例：</p></li></ul><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">typescript    class Person&#123;        name: string;        age: number;            constructor(name: string, age: number)&#123;            this.name &#x3D; name;            this.age &#x3D; age;        &#125;            sayHello()&#123;            console.log(&#96;大家好，我是$&#123;this.name&#125;&#96;);        &#125;    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><ul><li>使用类：</li></ul><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">typescript    const p &#x3D; new Person(&#39;孙悟空&#39;, 18);    p.sayHello();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div><h2 id="2、面向对象的特点"><a href="#2、面向对象的特点" class="headerlink" title="2、面向对象的特点"></a>2、面向对象的特点</h2><h3 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h3><ul><li><p>对象实质上就是属性和方法的容器，它的主要作用就是存储属性和方法，这就是所谓的封装</p></li><li><p>默认情况下，对象的属性是可以任意的修改的，为了确保数据的安全性，在TS中可以对属性的权限进行设置</p></li><li><p>只读属性（readonly）：</p><ul><li>如果在声明属性时添加一个readonly，则属性便成了只读属性无法修改</li></ul></li><li><p>TS中属性具有三种修饰符：</p><ul><li>public（默认值），可以在类、子类和对象中修改</li><li>protected ，可以在类、子类中修改</li><li>private ，可以在类中修改</li></ul></li><li><p>示例：</p><ul><li><p>public</p><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">typescript  class Person&#123;      public name: string; &#x2F;&#x2F; 写或什么都不写都是public      public age: number;        constructor(name: string, age: number)&#123;          this.name &#x3D; name; &#x2F;&#x2F; 可以在类中修改          this.age &#x3D; age;      &#125;        sayHello()&#123;          console.log(&#96;大家好，我是$&#123;this.name&#125;&#96;);      &#125;  &#125;    class Employee extends Person&#123;      constructor(name: string, age: number)&#123;          super(name, age);          this.name &#x3D; name; &#x2F;&#x2F;子类中可以修改      &#125;  &#125;    const p &#x3D; new Person(&#39;孙悟空&#39;, 18);  p.name &#x3D; &#39;猪八戒&#39;;&#x2F;&#x2F; 可以通过对象修改<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></li><li><p>protected</p><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">typescript  class Person&#123;      protected name: string;      protected age: number;        constructor(name: string, age: number)&#123;          this.name &#x3D; name; &#x2F;&#x2F; 可以修改          this.age &#x3D; age;      &#125;        sayHello()&#123;          console.log(&#96;大家好，我是$&#123;this.name&#125;&#96;);      &#125;  &#125;    class Employee extends Person&#123;        constructor(name: string, age: number)&#123;          super(name, age);          this.name &#x3D; name; &#x2F;&#x2F;子类中可以修改      &#125;  &#125;    const p &#x3D; new Person(&#39;孙悟空&#39;, 18);  p.name &#x3D; &#39;猪八戒&#39;;&#x2F;&#x2F; 不能修改<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></li><li><p>private</p><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">typescript  class Person&#123;      private name: string;      private age: number;        constructor(name: string, age: number)&#123;          this.name &#x3D; name; &#x2F;&#x2F; 可以修改          this.age &#x3D; age;      &#125;        sayHello()&#123;          console.log(&#96;大家好，我是$&#123;this.name&#125;&#96;);      &#125;  &#125;    class Employee extends Person&#123;        constructor(name: string, age: number)&#123;          super(name, age);          this.name &#x3D; name; &#x2F;&#x2F;子类中不能修改      &#125;  &#125;    const p &#x3D; new Person(&#39;孙悟空&#39;, 18);  p.name &#x3D; &#39;猪八戒&#39;;&#x2F;&#x2F; 不能修改<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></li></ul></li><li><p>属性存取器</p><ul><li><p>对于一些不希望被任意修改的属性，可以将其设置为private</p></li><li><p>直接将其设置为private将导致无法再通过对象修改其中的属性</p></li><li><p>我们可以在类中定义一组读取、设置属性的方法，这种对属性读取或设置的属性被称为属性的存取器</p></li><li><p>读取属性的方法叫做setter方法，设置属性的方法叫做getter方法</p></li><li><p>示例：</p><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">typescript  class Person&#123;      private _name: string;        constructor(name: string)&#123;          this._name &#x3D; name;      &#125;        get name()&#123;          return this._name;      &#125;        set name(name: string)&#123;          this._name &#x3D; name;      &#125;    &#125;    const p1 &#x3D; new Person(&#39;孙悟空&#39;);  console.log(p1.name); &#x2F;&#x2F; 通过getter读取name属性  p1.name &#x3D; &#39;猪八戒&#39;; &#x2F;&#x2F; 通过setter修改name属性<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></li></ul></li><li><p>静态属性</p><ul><li><p>静态属性（方法），也称为类属性。使用静态属性无需创建实例，通过类即可直接使用</p></li><li><p>静态属性（方法）使用static开头</p></li><li><p>示例：</p><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">typescript  class Tools&#123;      static PI &#x3D; 3.1415926;            static sum(num1: number, num2: number)&#123;          return num1 + num2      &#125;  &#125;    console.log(Tools.PI);  console.log(Tools.sum(123, 456));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></li></ul></li><li><p>this</p><ul><li>在类中，使用this表示当前对象</li></ul></li><li><p>继承</p><ul><li><p>继承时面向对象中的又一个特性</p></li><li><p>通过继承可以将其他类中的属性和方法引入到当前类中</p><ul><li><p>示例：</p><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">typescript  class Animal&#123;      name: string;      age: number;        constructor(name: string, age: number)&#123;          this.name &#x3D; name;          this.age &#x3D; age;      &#125;  &#125;    class Dog extends Animal&#123;        bark()&#123;          console.log(&#96;$&#123;this.name&#125;在汪汪叫！&#96;);      &#125;  &#125;    const dog &#x3D; new Dog(&#39;旺财&#39;, 4);  dog.bark();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></li></ul></li><li><p>通过继承可以在不修改类的情况下完成对类的扩展</p></li><li><p>重写</p><ul><li><p>发生继承时，如果子类中的方法会替换掉父类中的同名方法，这就称为方法的重写</p></li><li><p>示例：</p><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">typescript  class Animal&#123;      name: string;      age: number;        constructor(name: string, age: number)&#123;          this.name &#x3D; name;          this.age &#x3D; age;      &#125;        run()&#123;          console.log(&#96;父类中的run方法！&#96;);      &#125;  &#125;    class Dog extends Animal&#123;        bark()&#123;          console.log(&#96;$&#123;this.name&#125;在汪汪叫！&#96;);      &#125;        run()&#123;          console.log(&#96;子类中的run方法，会重写父类中的run方法！&#96;);      &#125;  &#125;    const dog &#x3D; new Dog(&#39;旺财&#39;, 4);  dog.bark();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><ul><li>在子类中可以使用super来完成对父类的引用</li></ul></li></ul></li><li><p>抽象类（abstract class）</p><ul><li>抽象类是专门用来被其他类所继承的类，它只能被其他类所继承不能用来创建实例</li></ul><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">typescript  abstract class Animal&#123;      abstract run(): void;      bark()&#123;          console.log(&#39;动物在叫~&#39;);      &#125;  &#125;    class Dog extends Animals&#123;      run()&#123;          console.log(&#39;狗在跑~&#39;);      &#125;  &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><ul><li>使用abstract开头的方法叫做抽象方法，抽象方法没有方法体只能定义在抽象类中，继承抽象类时抽象方法必须要实现</li></ul></li></ul></li></ul><h2 id="3、接口（Interface）"><a href="#3、接口（Interface）" class="headerlink" title="3、接口（Interface）"></a>3、接口（Interface）</h2><p>接口的作用类似于抽象类，不同点在于接口中的所有方法和属性都是没有实值的，换句话说接口中的所有方法都是抽象方法。接口主要负责定义一个类的结构，接口可以去限制一个对象的接口，对象只有包含接口中定义的所有属性和方法时才能匹配接口。同时，可以让一个类去实现接口，实现接口时类中要保护接口中的所有属性。</p><ul><li><p>示例（检查对象类型）：</p><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">typescript  interface Person&#123;      name: string;      sayHello():void;  &#125;    function fn(per: Person)&#123;      per.sayHello();  &#125;    fn(&#123;name:&#39;孙悟空&#39;, sayHello() &#123;console.log(&#96;Hello, 我是 $&#123;this.name&#125;&#96;)&#125;&#125;);  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></li><li><p>示例（实现）</p><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">typescript  interface Person&#123;      name: string;      sayHello():void;  &#125;    class Student implements Person&#123;      constructor(public name: string) &#123;      &#125;        sayHello() &#123;          console.log(&#39;大家好，我是&#39;+this.name);      &#125;  &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></li></ul><h2 id="4、泛型（Generic）"><a href="#4、泛型（Generic）" class="headerlink" title="4、泛型（Generic）"></a>4、泛型（Generic）</h2><p>定义一个函数或类时，有些情况下无法确定其中要使用的具体类型（返回值、参数、属性的类型不能确定），此时泛型便能够发挥作用。</p><ul><li>举个例子：</li></ul><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">typescript  function test(arg: any): any&#123;  return arg;  &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div><ul><li><p>上例中，test函数有一个参数类型不确定，但是能确定的时其返回值的类型和参数的类型是相同的，由于类型不确定所以参数和返回值均使用了any，但是很明显这样做是不合适的，首先使用any会关闭TS的类型检查，其次这样设置也不能体现出参数和返回值是相同的类型</p></li><li><p>使用泛型：</p></li></ul>  <div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">typescript  function test&lt;T&gt;(arg: T): T&#123;  return arg;  &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div><ul><li><p>这里的<T>就是泛型，T是我们给这个类型起的名字（不一定非叫T），设置泛型后即可在函数中使用T来表示该类型。所以泛型其实很好理解，就表示某个类型。</p></li><li><p>那么如何使用上边的函数呢？</p><ul><li><p>方式一（直接使用）：</p><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">typescript  test(10)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div><ul><li>使用时可以直接传递参数使用，类型会由TS自动推断出来，但有时编译器无法自动推断时还需要使用下面的方式</li></ul></li><li><p>方式二（指定类型）：</p><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">typescript  test&lt;number&gt;(10)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div><ul><li>也可以在函数后手动指定泛型</li></ul></li></ul></li><li><p>可以同时指定多个泛型，泛型间使用逗号隔开：</p><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">typescript  function test&lt;T, K&gt;(a: T, b: K): K&#123;      return b;  &#125;    test&lt;number, string&gt;(10, &quot;hello&quot;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><ul><li>使用泛型时，完全可以将泛型当成是一个普通的类去使用</li></ul></li><li><p>类中同样可以使用泛型：</p><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">typescript  class MyClass&lt;T&gt;&#123;      prop: T;        constructor(prop: T)&#123;          this.prop &#x3D; prop;      &#125;  &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></li><li><p>除此之外，也可以对泛型的范围进行约束</p><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">typescript  interface MyInter&#123;      length: number;  &#125;    function test&lt;T extends MyInter&gt;(arg: T): number&#123;      return arg.length;  &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><ul><li>使用T extends MyInter表示泛型T必须是MyInter的子类，不一定非要使用接口类和抽象类同样适用。</li></ul></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>Router</tag>
      
      <tag>路由</tag>
      
      <tag>基础</tag>
      
      <tag>TypeScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
